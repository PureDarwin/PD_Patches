diff -rwU5 A/CommonCrypto-55010/CommonCrypto.xcodeproj/project.pbxproj B/CommonCrypto-55010/CommonCrypto.xcodeproj/project.pbxproj
--- A/CommonCrypto-55010/CommonCrypto.xcodeproj/project.pbxproj	2011-04-13 23:46:18.000000000 +0100
+++ B/CommonCrypto-55010/CommonCrypto.xcodeproj/project.pbxproj	2018-07-02 12:07:57.000000000 +0100
@@ -74,12 +74,12 @@
 		05D8D97D09E411AB00E03504 /* CommonHMAC.h in Headers */ = {isa = PBXBuildFile; fileRef = 05D8D97C09E411AA00E03504 /* CommonHMAC.h */; settings = {ATTRIBUTES = (Public, ); }; };
 		05D9F61909D85F4A00AD30A7 /* CommonCryptor.h in Headers */ = {isa = PBXBuildFile; fileRef = 05D9F61609D85F4A00AD30A7 /* CommonCryptor.h */; settings = {ATTRIBUTES = (Public, ); }; };
 		05E319BD063890C100C4AD24 /* sha2.c in Sources */ = {isa = PBXBuildFile; fileRef = 05E319B7063890C100C4AD24 /* sha2.c */; };
 		05E319DD0638913700C4AD24 /* sha2Priv.h in Headers */ = {isa = PBXBuildFile; fileRef = 05E319DC0638913700C4AD24 /* sha2Priv.h */; };
 		05ECA0EE09D469A100CFE5CB /* set_key.c in Sources */ = {isa = PBXBuildFile; fileRef = 05ECA0ED09D469A100CFE5CB /* set_key.c */; };
-		122ADC45121320D70027F302 /* sha256_nossse3.s in Sources */ = {isa = PBXBuildFile; fileRef = 122ADC43121320D70027F302 /* sha256_nossse3.s */; };
-		122ADC46121320D70027F302 /* sha256.s in Sources */ = {isa = PBXBuildFile; fileRef = 122ADC44121320D70027F302 /* sha256.s */; };
+		122ADC45121320D70027F302 /* sha256_nossse3.s in Sources */ = {isa = PBXBuildFile; fileRef = 122ADC43121320D70027F302 /* sha256_nossse3.s */; settings = {COMPILER_FLAGS = "-no-integrated-as"; }; };
+		122ADC46121320D70027F302 /* sha256.s in Sources */ = {isa = PBXBuildFile; fileRef = 122ADC44121320D70027F302 /* sha256.s */; settings = {COMPILER_FLAGS = "-no-integrated-as"; }; };
 		1235BCBF1207FAFC002BC892 /* libcommonCrypto.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 054BBEC605F6A98900344873 /* libcommonCrypto.dylib */; };
 		1249340812270E8900F9C9E1 /* cfb8_decrypt.c in Sources */ = {isa = PBXBuildFile; fileRef = 1249340112270E8900F9C9E1 /* cfb8_decrypt.c */; };
 		1249340912270E8900F9C9E1 /* cfb8_descriptor.c in Sources */ = {isa = PBXBuildFile; fileRef = 1249340212270E8900F9C9E1 /* cfb8_descriptor.c */; };
 		1249340A12270E8900F9C9E1 /* cfb8_done.c in Sources */ = {isa = PBXBuildFile; fileRef = 1249340312270E8900F9C9E1 /* cfb8_done.c */; };
 		1249340B12270E8900F9C9E1 /* cfb8_encrypt.c in Sources */ = {isa = PBXBuildFile; fileRef = 1249340412270E8900F9C9E1 /* cfb8_encrypt.c */; };
@@ -91,23 +91,23 @@
 		125B796711FF92FC008C1AD3 /* crypto.c in Sources */ = {isa = PBXBuildFile; fileRef = 125B796011FF92FC008C1AD3 /* crypto.c */; };
 		125B796811FF92FC008C1AD3 /* hexString.c in Sources */ = {isa = PBXBuildFile; fileRef = 125B796111FF92FC008C1AD3 /* hexString.c */; };
 		125B796911FF92FC008C1AD3 /* printByteBuffer.c in Sources */ = {isa = PBXBuildFile; fileRef = 125B796311FF92FC008C1AD3 /* printByteBuffer.c */; };
 		125B796A11FF92FC008C1AD3 /* xtsTestVectors.c in Sources */ = {isa = PBXBuildFile; fileRef = 125B796511FF92FC008C1AD3 /* xtsTestVectors.c */; };
 		12B5D56D11FF437500626A60 /* aesxts.c in Sources */ = {isa = PBXBuildFile; fileRef = 48B4B98C11ABA1B4001F1036 /* aesxts.c */; };
-		12B5D56E11FF437A00626A60 /* aesxts_asm.s in Sources */ = {isa = PBXBuildFile; fileRef = 48B4B98D11ABA1B4001F1036 /* aesxts_asm.s */; };
+		12B5D56E11FF437A00626A60 /* aesxts_asm.s in Sources */ = {isa = PBXBuildFile; fileRef = 48B4B98D11ABA1B4001F1036 /* aesxts_asm.s */; settings = {COMPILER_FLAGS = "-no-integrated-as"; }; };
 		12C3F7E6122AD1B100E09D9E /* SenTestingKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 12C3F7E5122AD1B100E09D9E /* SenTestingKit.framework */; };
 		12CC5DDA120373D1001B4FCE /* CBCTest.c in Sources */ = {isa = PBXBuildFile; fileRef = 12CC5DD9120373D1001B4FCE /* CBCTest.c */; };
 		12FA0DB011F7962100917A4E /* CommonRandomSPI.h in Headers */ = {isa = PBXBuildFile; fileRef = 12FA0DAF11F7962100917A4E /* CommonRandomSPI.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		12FA0DB211F7964700917A4E /* CommonRandom.c in Sources */ = {isa = PBXBuildFile; fileRef = 12FA0DB111F7964700917A4E /* CommonRandom.c */; };
 		12FA10CA11F7A01D00917A4E /* libcommonCrypto.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 054BBEBE05F6A97700344873 /* libcommonCrypto.dylib */; };
 		48096B2311A5EF900043F67F /* CommonDigest.c in Sources */ = {isa = PBXBuildFile; fileRef = 48096B2211A5EF900043F67F /* CommonDigest.c */; };
 		480C9AD712077BCF002EC023 /* byteBuffer.c in Sources */ = {isa = PBXBuildFile; fileRef = 480C9AD512077BCF002EC023 /* byteBuffer.c */; };
-		48161AFF11AF011B009A14CE /* AES.s in Sources */ = {isa = PBXBuildFile; fileRef = 48B4B99311ABA1B4001F1036 /* AES.s */; };
-		48161B0011AF0123009A14CE /* aes_crypt_hw.s in Sources */ = {isa = PBXBuildFile; fileRef = 48B4B99611ABA1B4001F1036 /* aes_crypt_hw.s */; };
-		48161B0111AF0124009A14CE /* aes_key_hw.s in Sources */ = {isa = PBXBuildFile; fileRef = 48B4B99511ABA1B4001F1036 /* aes_key_hw.s */; };
-		48161B0211AF0124009A14CE /* aes_modes_asm.s in Sources */ = {isa = PBXBuildFile; fileRef = 48B4B98A11ABA1B4001F1036 /* aes_modes_asm.s */; };
-		48161B0311AF0125009A14CE /* aes_modes_hw.s in Sources */ = {isa = PBXBuildFile; fileRef = 48B4B98911ABA1B4001F1036 /* aes_modes_hw.s */; };
+		48161AFF11AF011B009A14CE /* AES.s in Sources */ = {isa = PBXBuildFile; fileRef = 48B4B99311ABA1B4001F1036 /* AES.s */; settings = {COMPILER_FLAGS = "-no-integrated-as"; }; };
+		48161B0011AF0123009A14CE /* aes_crypt_hw.s in Sources */ = {isa = PBXBuildFile; fileRef = 48B4B99611ABA1B4001F1036 /* aes_crypt_hw.s */; settings = {COMPILER_FLAGS = "-no-integrated-as"; }; };
+		48161B0111AF0124009A14CE /* aes_key_hw.s in Sources */ = {isa = PBXBuildFile; fileRef = 48B4B99511ABA1B4001F1036 /* aes_key_hw.s */; settings = {COMPILER_FLAGS = "-no-integrated-as"; }; };
+		48161B0211AF0124009A14CE /* aes_modes_asm.s in Sources */ = {isa = PBXBuildFile; fileRef = 48B4B98A11ABA1B4001F1036 /* aes_modes_asm.s */; settings = {COMPILER_FLAGS = "-no-integrated-as"; }; };
+		48161B0311AF0125009A14CE /* aes_modes_hw.s in Sources */ = {isa = PBXBuildFile; fileRef = 48B4B98911ABA1B4001F1036 /* aes_modes_hw.s */; settings = {COMPILER_FLAGS = "-no-integrated-as"; }; };
 		4836A41F11A5C94A00862178 /* rc2.h in Headers */ = {isa = PBXBuildFile; fileRef = 4836A41811A5C94A00862178 /* rc2.h */; };
 		4836A42011A5C94A00862178 /* opensslDES.h in Headers */ = {isa = PBXBuildFile; fileRef = 4836A41911A5C94A00862178 /* opensslDES.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		4836A42111A5C94A00862178 /* CommonCryptoPriv.h in Headers */ = {isa = PBXBuildFile; fileRef = 4836A41A11A5C94A00862178 /* CommonCryptoPriv.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		4836A42211A5C94A00862178 /* ccRC2.h in Headers */ = {isa = PBXBuildFile; fileRef = 4836A41B11A5C94A00862178 /* ccRC2.h */; };
 		4836A42311A5C94A00862178 /* ccCast.h in Headers */ = {isa = PBXBuildFile; fileRef = 4836A41C11A5C94A00862178 /* ccCast.h */; settings = {ATTRIBUTES = (Private, ); }; };
@@ -257,13 +257,13 @@
 		48D5637311A652EB008EBBBF /* aestab.c in Sources */ = {isa = PBXBuildFile; fileRef = 48D5636D11A652EB008EBBBF /* aestab.c */; };
 		48D5637411A652EB008EBBBF /* aestab.h in Headers */ = {isa = PBXBuildFile; fileRef = 48D5636E11A652EB008EBBBF /* aestab.h */; };
 		48D5637511A652EB008EBBBF /* ccNewGladman.c in Sources */ = {isa = PBXBuildFile; fileRef = 48D5636F11A652EB008EBBBF /* ccNewGladman.c */; };
 		48D5638611A65316008EBBBF /* AES.c in Sources */ = {isa = PBXBuildFile; fileRef = 48D5637711A65316008EBBBF /* AES.c */; };
 		48D5638711A65316008EBBBF /* AESAssembly.h in Headers */ = {isa = PBXBuildFile; fileRef = 48D5637811A65316008EBBBF /* AESAssembly.h */; };
-		48D5638911A65316008EBBBF /* AES.s in Sources */ = {isa = PBXBuildFile; fileRef = 48D5637B11A65316008EBBBF /* AES.s */; };
-		48D5638B11A65316008EBBBF /* DecryptCBC.s in Sources */ = {isa = PBXBuildFile; fileRef = 48D5637D11A65316008EBBBF /* DecryptCBC.s */; };
-		48D5638C11A65316008EBBBF /* EncryptCBC.s in Sources */ = {isa = PBXBuildFile; fileRef = 48D5637E11A65316008EBBBF /* EncryptCBC.s */; };
+		48D5638911A65316008EBBBF /* AES.s in Sources */ = {isa = PBXBuildFile; fileRef = 48D5637B11A65316008EBBBF /* AES.s */; settings = {COMPILER_FLAGS = "-no-integrated-as"; }; };
+		48D5638B11A65316008EBBBF /* DecryptCBC.s in Sources */ = {isa = PBXBuildFile; fileRef = 48D5637D11A65316008EBBBF /* DecryptCBC.s */; settings = {COMPILER_FLAGS = "-no-integrated-as"; }; };
+		48D5638C11A65316008EBBBF /* EncryptCBC.s in Sources */ = {isa = PBXBuildFile; fileRef = 48D5637E11A65316008EBBBF /* EncryptCBC.s */; settings = {COMPILER_FLAGS = "-no-integrated-as"; }; };
 		48F7B00112F248C900E70774 /* CCCalibratePBKDF.3cc in CopyFiles */ = {isa = PBXBuildFile; fileRef = 48F7AFFF12F2488500E70774 /* CCCalibratePBKDF.3cc */; };
 		48F7B00212F248C900E70774 /* CCCommonKeyDerivation.3cc in CopyFiles */ = {isa = PBXBuildFile; fileRef = 48F7B00012F2488500E70774 /* CCCommonKeyDerivation.3cc */; };
 		48F7B00812F248E600E70774 /* CCKeyDerivationPBKDF.3cc in CopyFiles */ = {isa = PBXBuildFile; fileRef = 48F7B00312F248E600E70774 /* CCKeyDerivationPBKDF.3cc */; };
 		48F7B00912F248E600E70774 /* CCSymmetricKeyUnwrap.3cc in CopyFiles */ = {isa = PBXBuildFile; fileRef = 48F7B00412F248E600E70774 /* CCSymmetricKeyUnwrap.3cc */; };
 		48F7B00A12F248E600E70774 /* CCSymmetricKeyWrap.3cc in CopyFiles */ = {isa = PBXBuildFile; fileRef = 48F7B00512F248E600E70774 /* CCSymmetricKeyWrap.3cc */; };
@@ -480,12 +480,12 @@
 		5DAD83A31279F29300240B9A /* Foundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 5DAD83A21279F29300240B9A /* Foundation.framework */; };
 		5DAD83A61279F29800240B9A /* Foundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 5DAD83A21279F29300240B9A /* Foundation.framework */; };
 		5DAD83AF1279F4C400240B9A /* main.mm in Sources */ = {isa = PBXBuildFile; fileRef = 5DAD83A71279F2B200240B9A /* main.mm */; };
 		795CA41E0D34459D00BAE6A2 /* ccRC2.c in Sources */ = {isa = PBXBuildFile; fileRef = 795CA3FD0D34431400BAE6A2 /* ccRC2.c */; };
 		795CA41F0D34459D00BAE6A2 /* rc2.c in Sources */ = {isa = PBXBuildFile; fileRef = 795CA3FE0D34431400BAE6A2 /* rc2.c */; };
-		AAAF0B9E0DC7A3DA0044DA03 /* sha1edpBigEndian.s in Sources */ = {isa = PBXBuildFile; fileRef = AAB5CBCD0DC6AB6D0019E0E6 /* sha1edpBigEndian.s */; };
-		AAAF0B9F0DC7A3DA0044DA03 /* sha1edpLittleEndian.s in Sources */ = {isa = PBXBuildFile; fileRef = AAB5CBCE0DC6AB6D0019E0E6 /* sha1edpLittleEndian.s */; };
+		AAAF0B9E0DC7A3DA0044DA03 /* sha1edpBigEndian.s in Sources */ = {isa = PBXBuildFile; fileRef = AAB5CBCD0DC6AB6D0019E0E6 /* sha1edpBigEndian.s */; settings = {COMPILER_FLAGS = "-no-integrated-as"; }; };
+		AAAF0B9F0DC7A3DA0044DA03 /* sha1edpLittleEndian.s in Sources */ = {isa = PBXBuildFile; fileRef = AAB5CBCE0DC6AB6D0019E0E6 /* sha1edpLittleEndian.s */; settings = {COMPILER_FLAGS = "-no-integrated-as"; }; };
 		D6658D950BD8178400D18063 /* CC_crypto.3cc in CopyFiles */ = {isa = PBXBuildFile; fileRef = 05DF6D1109CF2D7200D9A3E8 /* CC_crypto.3cc */; };
 		D6658D960BD8178400D18063 /* CC_MD2.3cc in CopyFiles */ = {isa = PBXBuildFile; fileRef = D671B5B60BC6D67000878B42 /* CC_MD2.3cc */; };
 		D6658D970BD8178400D18063 /* CC_MD2_Final.3cc in CopyFiles */ = {isa = PBXBuildFile; fileRef = D671B5B70BC6D67000878B42 /* CC_MD2_Final.3cc */; };
 		D6658D980BD8178400D18063 /* CC_MD2_Init.3cc in CopyFiles */ = {isa = PBXBuildFile; fileRef = D671B5B80BC6D67000878B42 /* CC_MD2_Init.3cc */; };
 		D6658D990BD8178400D18063 /* CC_MD2_Update.3cc in CopyFiles */ = {isa = PBXBuildFile; fileRef = D671B5B90BC6D67000878B42 /* CC_MD2_Update.3cc */; };
@@ -2160,10 +2160,12 @@
 /* End PBXNativeTarget section */
 
 /* Begin PBXProject section */
 		054BBEA605F6A8DE00344873 /* Project object */ = {
 			isa = PBXProject;
+			attributes = {
+			};
 			buildConfigurationList = C27AD0910987FCDA001272E0 /* Build configuration list for PBXProject "CommonCrypto" */;
 			compatibilityVersion = "Xcode 3.2";
 			developmentRegion = English;
 			hasScannedForEncodings = 1;
 			knownRegions = (
@@ -2678,10 +2680,11 @@
 			name = Development;
 		};
 		12F25D8511F7BF8A0036BC8E /* Development */ = {
 			isa = XCBuildConfiguration;
 			buildSettings = {
+				SDKROOT = macosx.internal;
 			};
 			name = Development;
 		};
 		12F25D8611F7BF8A0036BC8E /* Development */ = {
 			isa = XCBuildConfiguration;
@@ -2704,12 +2707,24 @@
 		12F25D8711F7BF8A0036BC8E /* Development */ = {
 			isa = XCBuildConfiguration;
 			baseConfigurationReference = 12FA10D111F7AAE400917A4E /* CommonCrypto_umbrellaMember_development.xcconfig */;
 			buildSettings = {
 				EXPORTED_SYMBOLS_FILE = Source/CommonCrypto.exp;
-				OTHER_LDFLAGS = "";
-				SDKROOT = "";
+				LINK_WITH_STANDARD_LIBRARIES = NO;
+				OTHER_LDFLAGS = (
+					"-L/usr/lib/system",
+					"-lsystem_kernel",
+					"-lcompiler_rt",
+					"-ldyld",
+					"-lsystem_platform",
+					"-lsystem_c",
+					"-lsystem_malloc",
+					"-ldispatch",
+					"-lsystem_blocks",
+					"-lsystem_asl",
+					"-Wl,-umbrella,System",
+				);
 			};
 			name = Development;
 		};
 		12F25D8811F7BF8A0036BC8E /* Development */ = {
 			isa = XCBuildConfiguration;
@@ -2866,12 +2881,24 @@
 		C27AD07F0987FCDA001272E0 /* Release */ = {
 			isa = XCBuildConfiguration;
 			baseConfigurationReference = 12FA10D011F7AACE00917A4E /* CommonCrypto_umbrellaMember_deployment.xcconfig */;
 			buildSettings = {
 				EXPORTED_SYMBOLS_FILE = Source/CommonCrypto.exp;
-				OTHER_LDFLAGS = "";
-				SDKROOT = "";
+				LINK_WITH_STANDARD_LIBRARIES = NO;
+				OTHER_LDFLAGS = (
+					"-L/usr/lib/system",
+					"-lsystem_kernel",
+					"-lcompiler_rt",
+					"-ldyld",
+					"-lsystem_platform",
+					"-lsystem_c",
+					"-lsystem_malloc",
+					"-ldispatch",
+					"-lsystem_blocks",
+					"-lsystem_asl",
+					"-Wl,-umbrella,System",
+				);
 			};
 			name = Release;
 		};
 		C27AD08F0987FCDA001272E0 /* Release */ = {
 			isa = XCBuildConfiguration;
@@ -2893,10 +2920,11 @@
 		};
 		C27AD0930987FCDA001272E0 /* Release */ = {
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ARCHS = "$(ARCHS_STANDARD_32_64_BIT)";
+				SDKROOT = macosx.internal;
 			};
 			name = Release;
 		};
 /* End XCBuildConfiguration section */
 
Only in B/CommonCrypto-55010/CommonCrypto.xcodeproj: project.xcworkspace
Only in B/CommonCrypto-55010/CommonCrypto.xcodeproj: xcuserdata
diff -rwU5 A/CommonCrypto-55010/Configurations/CommonCrypto_base.xcconfig B/CommonCrypto-55010/Configurations/CommonCrypto_base.xcconfig
--- A/CommonCrypto-55010/Configurations/CommonCrypto_base.xcconfig	2011-04-13 23:46:18.000000000 +0100
+++ B/CommonCrypto-55010/Configurations/CommonCrypto_base.xcconfig	2018-07-02 12:07:57.000000000 +0100
@@ -80,11 +80,11 @@
 // * Begin Compiler Section
 // **************************************************************************
 
 // Compiler version: I would LOVE to use CLANG but CLANG currently does
 // not support C++ very well
-GCC_VERSION = com.apple.compilers.llvmgcc42
+//GCC_VERSION = com.apple.compilers.llvmgcc42
 
 GCC_C_LANGUAGE_STANDARD = gnu99
 
 // Debugging information.  
 DEBUG_INFORMATION_FORMAT = dwarf-with-dsym
Only in B/CommonCrypto-55010/Source/API: CommonSymmetricKeywrap.10.12.E
Only in B/CommonCrypto-55010/Source/API: CommonSymmetricKeywrap.E
diff -rwU5 A/CommonCrypto-55010/Source/API/CommonSymmetricKeywrap.c B/CommonCrypto-55010/Source/API/CommonSymmetricKeywrap.c
--- A/CommonCrypto-55010/Source/API/CommonSymmetricKeywrap.c	2011-04-13 23:46:18.000000000 +0100
+++ B/CommonCrypto-55010/Source/API/CommonSymmetricKeywrap.c	2018-07-02 12:07:59.000000000 +0100
@@ -149,17 +149,17 @@
     uint64_t (*R)[2]; /* R is a two-dimensional array, with n rows of 2 columns */
     int i, j, err;
 	
 	// allocate R
 	R = calloc(n, sizeof(uint64_t[2])); 
-    require_action(R, out, err = -1);
+    __Require_Action(R, out, err = -1);
     // don't wrap with something smaller
-    require_action(rawKeyLen >= kekLen, out, err = -1);
+    __Require_Action(rawKeyLen >= kekLen, out, err = -1);
     // kek multiple of 64 bits: 128, 192, 256
-    require_action(kekLen == 16 || kekLen == 24 || kekLen == 32, out, err = -1);
+    __Require_Action(kekLen == 16 || kekLen == 24 || kekLen == 32, out, err = -1);
     // wrapped_key_len 64 bits larger than key_len
-    require_action(wrappedKeyLen && (*wrappedKeyLen >= rawKeyLen + 64/8), out, err = -1);
+    __Require_Action(wrappedKeyLen && (*wrappedKeyLen >= rawKeyLen + 64/8), out, err = -1);
 
     // R[0][1] = P[0] ... R[1][n-1] = P[n-1]
     for (i = 0; i < n; i++)
         memcpy(&R[i][1], rawKey + (64/8) * i, (64/8));
 
@@ -168,11 +168,11 @@
     R[0][0] = kek_iv;
 
     for (j = 0; j < 6; j++) {
         for (i = 0; i < n; i++)
         {
-            require_action(aes_operation(true, kek, kekLen, (uint8_t*)&R[i][0]), out, err = -1);
+            __Require_Action(aes_operation(true, kek, kekLen, (uint8_t*)&R[i][0]), out, err = -1);
             R[(i + 1) % n][0] = R[i][0] ^ _OSSwapInt64((n*j)+i+1);
         }
     }
 	
     // write output
@@ -199,33 +199,33 @@
     uint64_t (*R)[2]; /* R is a two-dimensional array, with n rows of 2 columns */
     int i, j, err;
 
 	// allocate R
 	R = calloc(n, sizeof(uint64_t[2])); 
-    require_action(R, out, err = -1);
+    __Require_Action(R, out, err = -1);
 	// kek multiple of 64 bits: 128, 192, 256
-    require_action(kekLen == 16 || kekLen == 32, out, err = -1);
+    __Require_Action(kekLen == 16 || kekLen == 32, out, err = -1);
     // wrapped_key_len 64 bits larger than key_len
-    require_action(rawKeyLen && (*rawKeyLen >= wrappedKeyLen - 64/8), out, err = -1);
+    __Require_Action(rawKeyLen && (*rawKeyLen >= wrappedKeyLen - 64/8), out, err = -1);
 
     // R[0][1] = C[0] ... R[1][n-1] = C[n-1]
     memcpy(&R[0][0], wrappedKey, 64/8); 
     for (i = 0; i < n; i++)
         memcpy(&R[i][1], wrappedKey + (64/8) * (i+1), 64/8);
 
     for (j = 5; j >= 0; j--) {
         for (i = n - 1; i >= 0; i--)
         {
            R[i][0] = R[(i + 1) % n][0] ^ _OSSwapInt64((n*j)+i+1);
-            require_action(aes_operation(false, kek, kekLen, (uint8_t*)&R[i][0]), out, err = -1);
+            __Require_Action(aes_operation(false, kek, kekLen, (uint8_t*)&R[i][0]), out, err = -1);
         }
     }
 
 	uint64_t kek_iv = pack64(iv, ivLen);
 
     // R[0][0] == iv?
-    require_action(R[0][0] == kek_iv, out, err = -1);
+    __Require_Action(R[0][0] == kek_iv, out, err = -1);
 
     // write output
     for (i = 0; i < n; i++)
         memcpy(rawKey + i * 8, &R[i][1], 8);
 
Only in B/CommonCrypto-55010: obj
Only in B/CommonCrypto-55010: sym
