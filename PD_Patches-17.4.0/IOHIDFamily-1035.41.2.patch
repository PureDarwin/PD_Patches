diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDEventTranslation/IOHIDPointerEventTranslation.c B/IOHIDFamily-1035.41.2/IOHIDEventTranslation/IOHIDPointerEventTranslation.c
--- A/IOHIDFamily-1035.41.2/IOHIDEventTranslation/IOHIDPointerEventTranslation.c	2017-01-19 21:36:22.000000000 +0000
+++ B/IOHIDFamily-1035.41.2/IOHIDEventTranslation/IOHIDPointerEventTranslation.c	2018-07-02 12:09:45.000000000 +0100
@@ -210,11 +210,11 @@
     return translator;
   }
   
 
   translator->serviceRecord = CFDictionaryCreateMutable (CFGetAllocator(translator), 0, NULL, &kCFTypeDictionaryValueCallBacks);
-  require(translator->serviceRecord, error_exit);
+  __Require(translator->serviceRecord, error_exit);
 
   mach_timebase_info(&(translator->timebaseInfo));
   
   translator->clickCountTimeTreshold                = EV_DCLICKTIME;
   translator->clickCountPixelTreshold               = EV_DCLICKSPACE;
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDDebug.h B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDDebug.h
--- A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDDebug.h	2016-02-29 17:19:12.000000000 +0000
+++ B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDDebug.h	2018-07-02 12:09:45.000000000 +0100
@@ -7,10 +7,21 @@
 //
 
 #ifndef IOHIDDebug_h
 #define IOHIDDebug_h
 
+#if defined(__BUILDING_PUREDARWIN__)
+
+//#define _HIDLog()
+#define HIDLog(fmt, ...)        /* printf(fmt, ##__VA_ARGS__) */
+#define HIDLogError(fmt, ...)   /* printf(fmt, ##__VA_ARGS__) */
+#define HIDLogDebug(fmt, ...)   /* printf(fmt, ##__VA_ARGS__) */
+#define HIDLogInfo(fmt, ...)    /* printf(fmt, ##__VA_ARGS__) */
+#define HIDLogFault(fmt, ...)   /* printf(fmt, ##__VA_ARGS__) */
+
+#else /* !defined(__BUILDING_PUREDARWIN__) */
+
 #include <os/log.h>
 
 static inline os_log_t _HIDLog(void)
 {
     static os_log_t log = NULL;
@@ -28,6 +39,8 @@
 
 /* probably won't use these */
 #define HIDLogInfo(fmt, ...)    os_log_info(_HIDLog(), fmt, ##__VA_ARGS__)
 #define HIDLogFault(fmt, ...)   os_log_fault(_HIDLog(), fmt, ##__VA_ARGS__)
 
+#endif /* defined(__BUILDING_PUREDARWIN__) */
+
 #endif /* IOHIDDebug_h */
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDDevice.cpp B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDDevice.cpp
--- A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDDevice.cpp	2017-06-23 00:31:39.000000000 +0100
+++ B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDDevice.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -419,60 +419,60 @@
     OSObject *              obj                     = NULL;
     OSObject *              obj2                    = NULL;
     IOReturn                ret;
     bool                    result;
 
-    require_action(super::start(provider), error, result=false);
+    __Require_Action(super::start(provider), error, result=false);
     
     _workLoop = getWorkLoop();
-    require_action(_workLoop, error, HIDLogError("IOHIDDevice failed to get a work loop"); result=false);
+    __Require_Action(_workLoop, error, HIDLogError("IOHIDDevice failed to get a work loop"); result=false);
     
     _workLoop->retain();
     
     _eventSource = IOHIDEventSource::HIDEventSource(this, NULL);
-    require_action(_eventSource, error, result=false);
-    require_noerr_action(_workLoop->addEventSource(_eventSource), error, result=false);
+    __Require_Action(_eventSource, error, result=false);
+    __Require_noErr_Action(_workLoop->addEventSource(_eventSource), error, result=false);
 
     // Allocate memory for report handler dispatch table.
 
     _reportHandlers = (IOHIDReportHandler *)IOMalloc(sizeof(IOHIDReportHandler)*kReportHandlerSlots);
-    require_action(_reportHandlers, error, result=false);
+    __Require_Action(_reportHandlers, error, result=false);
 
     bzero( _reportHandlers, sizeof(IOHIDReportHandler) * kReportHandlerSlots );
 
     // Call handleStart() before fetching the report descriptor.
-    require_action(handleStart(provider), error, result=false);
+    __Require_Action(handleStart(provider), error, result=false);
 
     // Fetch report descriptor for the device, and parse it.
-    require_noerr_action(newReportDescriptor(&reportDescriptor), error, result=false);
-    require_action(reportDescriptor, error, result=false);
+    __Require_noErr_Action(newReportDescriptor(&reportDescriptor), error, result=false);
+    __Require_Action(reportDescriptor, error, result=false);
     
     reportDescriptorMap = reportDescriptor->map();
-    require_action(reportDescriptorMap, error, result=false);
+    __Require_Action(reportDescriptorMap, error, result=false);
     
     reportDescriptorData = OSData::withBytes((void*)reportDescriptorMap->getVirtualAddress(), (unsigned int)reportDescriptorMap->getSize());
-    require_action(reportDescriptorData, error, result=false);
+    __Require_Action(reportDescriptorData, error, result=false);
 
     setProperty(kIOHIDReportDescriptorKey, reportDescriptorData);
 
     ret = parseReportDescriptor( reportDescriptor );
-    require_noerr_action(ret, error, result=false);
+    __Require_noErr_Action(ret, error, result=false);
 
     _hierarchElements = CreateHierarchicalElementList((IOHIDElement *)_elementArray->getObject( 0 ));
-    require_action(_hierarchElements, error, result=false);
+    __Require_Action(_hierarchElements, error, result=false);
 
     _interfaceNub = IOHIDInterface::withElements( _hierarchElements );
-    require_action(_interfaceNub, error, result=false);
+    __Require_Action(_interfaceNub, error, result=false);
 
     // Once the report descriptors have been parsed, we are ready
     // to handle reports from the device.
 
     _readyForInputReports = true;
 
     // Publish properties to the registry before any clients are
     // attached.
-    require_action(publishProperties(provider), error, result=false);
+    __Require_Action(publishProperties(provider), error, result=false);
 
     // *** GAME DEVICE HACK ***
     obj = copyProperty(kIOHIDPrimaryUsagePageKey);
     primaryUsagePage = OSDynamicCast(OSNumber, obj);
     obj2 = copyProperty(kIOHIDPrimaryUsageKey);
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDElementPrivate.cpp B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDElementPrivate.cpp
--- A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDElementPrivate.cpp	2017-07-11 05:19:09.000000000 +0100
+++ B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDElementPrivate.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -1913,20 +1913,20 @@
     OSCollection    *result = NULL;
     OSDictionary    *properties = NULL;
     
     if (allocDict) {
         cycleDict = OSDictionary::withCapacity(16);
-        require(cycleDict, done);
+        __Require(cycleDict, done);
     }
     
     // Check for a cycle
     result = super::copyCollection(cycleDict);
     if (result)
         goto done;
     
     properties = createProperties();
-    require(properties, done);
+    __Require(properties, done);
     if (_childArray) {
         if (_childArray->getCount() < 0x1000) {
             OSCollection *childCopy = _childArray->copyCollection(cycleDict);
             if (childCopy) {
                 properties->setObject( kIOHIDElementKey, childCopy );
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEvent.cpp B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEvent.cpp
--- A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEvent.cpp	2017-06-07 19:12:10.000000000 +0100
+++ B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEvent.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -219,13 +219,13 @@
 {
     IOHIDEvent *            event   = new IOHIDEvent;
     IOHIDEvent *            result  = NULL;
     IOHIDUnicodeEventData * data    = NULL;
     
-    require(payload && length, exit);
-    require(event, exit);
-    require(event->initWithTypeTimeStamp(kIOHIDEventTypeUnicode, timeStamp, options|kIOHIDEventOptionIsAbsolute, length), exit);
+    __Require(payload && length, exit);
+    __Require(event, exit);
+    __Require(event->initWithTypeTimeStamp(kIOHIDEventTypeUnicode, timeStamp, options|kIOHIDEventOptionIsAbsolute, length), exit);
     
     data = (IOHIDUnicodeEventData *)event->_data;
     
     data->encoding  = encoding;
     data->quality   = quality;
@@ -560,16 +560,16 @@
                                         IOOptionBits            options)
 {
     IOHIDEvent *            event   = new IOHIDEvent;
     IOHIDButtonEventData *  data    = NULL;
     
-    require(event, exit);
+    __Require(event, exit);
     
-    require(event->initWithTypeTimeStamp(kIOHIDEventTypeButton, timeStamp, options | kIOHIDEventOptionIsAbsolute), exit);
+    __Require(event->initWithTypeTimeStamp(kIOHIDEventTypeButton, timeStamp, options | kIOHIDEventOptionIsAbsolute), exit);
     
     data = (IOHIDButtonEventData *)event->_data;
-    require(data, exit);
+    __Require(data, exit);
         
     data->mask          = mask;
     data->number        = number;
     data->state         = state;
     data->pressure      = state ? 0x10000 : 0x00000;
@@ -598,14 +598,14 @@
     IOHIDEvent *            event   = NULL;
     IOHIDButtonEventData *  data    = NULL;
     bool                    state   = (pressure>>16) & 0x1;
 
     event = buttonEvent(timeStamp, mask, number, state, options);
-    require(event, exit);
+    __Require(event, exit);
     
     data = (IOHIDButtonEventData *)event->_data;
-    require(data, exit);
+    __Require(data, exit);
     
     data->pressure = pressure;
 
 exit:
     return event;
@@ -626,16 +626,16 @@
     IOHIDEvent *            event   = NULL;
     IOHIDPointerEventData * data    = NULL;
     UInt32                  index, delta;
     
     event = new IOHIDEvent;
-    require(event, exit);
+    __Require(event, exit);
     
-    require(event->initWithTypeTimeStamp(kIOHIDEventTypePointer, timeStamp, options | kIOHIDEventOptionIsAbsolute), exit);
+    __Require(event->initWithTypeTimeStamp(kIOHIDEventTypePointer, timeStamp, options | kIOHIDEventOptionIsAbsolute), exit);
     
     data = (IOHIDPointerEventData *)event->_data;
-    require(data, exit);
+    __Require(data, exit);
     
     data->position.x = x;
     data->position.y = y;
     data->position.z = z;
     data->button.mask = buttonState;
@@ -685,16 +685,16 @@
     IOHIDEvent *            event   = NULL;
     IOHIDPointerEventData * data    = NULL;
     UInt32                  index, delta;
     
     event = new IOHIDEvent;
-    require(event, exit);
+    __Require(event, exit);
 
-    require(event->initWithTypeTimeStamp(kIOHIDEventTypePointer, timeStamp, options), exit);
+    __Require(event->initWithTypeTimeStamp(kIOHIDEventTypePointer, timeStamp, options), exit);
 
     data = (IOHIDPointerEventData *)event->_data;
-    require(data, exit);
+    __Require(data, exit);
 
     data->position.x = x;
     data->position.y = y;
     data->position.z = z;
     data->button.mask = buttonState;
@@ -759,16 +759,16 @@
     IOHIDEvent *                        event   = NULL;
     IOHIDMultiAxisPointerEventData *    data    = NULL;
     UInt32                              index, delta;
     
     event = new IOHIDEvent;
-    require(event, exit);
+    __Require(event, exit);
     
-    require(event->initWithTypeTimeStamp(kIOHIDEventTypeMultiAxisPointer, timeStamp, options | kIOHIDEventOptionIsAbsolute | kIOHIDEventOptionIsCenterOrigin), exit);
+    __Require(event->initWithTypeTimeStamp(kIOHIDEventTypeMultiAxisPointer, timeStamp, options | kIOHIDEventOptionIsAbsolute | kIOHIDEventOptionIsCenterOrigin), exit);
     
     data = (IOHIDMultiAxisPointerEventData *)event->_data;
-    require(data, exit);
+    __Require(data, exit);
 
     data->position.x    = x;
     data->position.y    = y;
     data->position.z    = z;
     data->rotation.x    = rX;
@@ -886,14 +886,14 @@
 {
     IOHIDEvent * me                 = NULL;
     IOHIDDigitizerEventData * event = NULL;
 
     me = IOHIDEvent::digitizerEvent(timeStamp, transducerID, type, inRange, buttonState, x, y, tipPressure, auxPressure, twist, options);
-    require(me, exit);
+    __Require(me, exit);
 
     event = (IOHIDDigitizerEventData *)me->_data;
-    require(event, exit);
+    __Require(event, exit);
 
     event->orientationType = kIOHIDDigitizerOrientationTypeTilt;
 
     event->orientation.tilt.x = xTilt;
     event->orientation.tilt.y = xTilt;
@@ -923,14 +923,14 @@
 {
     IOHIDEvent * me                 = NULL;
     IOHIDDigitizerEventData * event = NULL;
 
     me = IOHIDEvent::digitizerEvent(timeStamp, transducerID, type, inRange, buttonState, x, y, tipPressure, auxPressure, twist, options);
-    require(me, exit);
+    __Require(me, exit);
 
     event = (IOHIDDigitizerEventData *)me->_data;
-    require(event, exit);
+    __Require(event, exit);
 
     event->orientationType = kIOHIDDigitizerOrientationTypePolar;
 
     event->orientation.polar.altitude   = altitude;
     event->orientation.polar.azimuth    = azimuth;
@@ -961,11 +961,11 @@
                                         IOOptionBits                    options)
 {
     IOHIDDigitizerEventData * event = NULL;
 
     IOHIDEvent * me = IOHIDEvent::digitizerEventWithPolarOrientation(timeStamp, transducerID, type, inRange, buttonState, x, y, z, tipPressure, auxPressure, twist, altitude, azimuth, options);
-    require(me, exit);
+    __Require(me, exit);
  
     event = (IOHIDDigitizerEventData *)me->_data;
  
     event->orientation.polar.quality = quality;
     event->orientation.polar.density = density;
@@ -998,11 +998,11 @@
                                         IOOptionBits                    options)
 {
     IOHIDDigitizerEventData * event = NULL;
 
     IOHIDEvent * me = IOHIDEvent::digitizerEventWithPolarOrientation(timeStamp, transducerID, type, inRange, buttonState, x, y, z, tipPressure, auxPressure, twist, altitude, azimuth, quality, density, options);
-    require(me, exit);
+    __Require(me, exit);
 
     event = (IOHIDDigitizerEventData *)me->_data;
 
     event->orientation.polar.majorRadius = majorRadius;
     event->orientation.polar.minorRadius = minorRadius;
@@ -1036,14 +1036,14 @@
 {
     IOHIDEvent * me                 = NULL;
     IOHIDDigitizerEventData * event = NULL;
 
     me = IOHIDEvent::digitizerEvent(timeStamp, transducerID, type, inRange, buttonState, x, y, tipPressure, auxPressure, twist, options);
-    require(me, exit);
+    __Require(me, exit);
 
     event = (IOHIDDigitizerEventData *)me->_data;
-    require(event, exit);
+    __Require(event, exit);
 
     event->orientationType = kIOHIDDigitizerOrientationTypeQuality;
 
     event->orientation.quality.quality          = quality;
     event->orientation.quality.density          = density;
@@ -1196,13 +1196,13 @@
                                                      IOOptionBits                    options)
 {
     IOHIDEvent *me = new IOHIDEvent;
     IOHIDGameControllerEventData *event = NULL;
     
-    require(me, exit);
+    __Require(me, exit);
     
-    require_action(me->initWithTypeTimeStamp(kIOHIDEventTypeGameController, timeStamp, options | kIOHIDEventOptionIsAbsolute), exit, me->release());
+    __Require_Action(me->initWithTypeTimeStamp(kIOHIDEventTypeGameController, timeStamp, options | kIOHIDEventOptionIsAbsolute), exit, me->release());
     
     event = (IOHIDGameControllerEventData *)me->_data;
  
     event->dpad.up      = dpadUp;
     event->dpad.down    = dpadDown;
@@ -1241,11 +1241,11 @@
                                                      IOFixed                         joystickRz,
                                                      IOOptionBits                    options)
 {
     IOHIDEvent *me = standardGameControllerEvent(timeStamp, dpadUp, dpadDown, dpadLeft, dpadRight, faceX, faceY, faceA, faceB, shoulderL1, shoulderR1, options);
     IOHIDGameControllerEventData *event = NULL;
-    require(me, exit);
+    __Require(me, exit);
     
     event = (IOHIDGameControllerEventData *)me->_data;
     
     event->controllerType = kIOHIDGameControllerTypeExtended;
     event->shoulder.l2  = shoulderL2;
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEventDriver.cpp B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEventDriver.cpp
--- A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEventDriver.cpp	2017-06-15 01:04:52.000000000 +0100
+++ B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEventDriver.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -97,21 +97,21 @@
 {
     EventElementCollection * result = NULL;
     
     result = new EventElementCollection;
     
-    require(result, exit);
+    __Require(result, exit);
     
-    require_action(result->init(), exit, result=NULL);
+    __Require_Action(result->init(), exit, result=NULL);
     
     result->collection = gestureCollection;
     
     if ( result->collection )
         result->collection->retain();
     
     result->elements = OSArray::withCapacity(4);
-    require_action(result->elements, exit, OSSafeReleaseNULL(result));
+    __Require_Action(result->elements, exit, OSSafeReleaseNULL(result));
     
 exit:
     return result;
 }
 
@@ -172,13 +172,13 @@
 {
     DigitizerTransducer * result = NULL;
     
     result = new DigitizerTransducer;
     
-    require(result, exit);
+    __Require(result, exit);
     
-    require_action(result->init(), exit, result=NULL);
+    __Require_Action(result->init(), exit, result=NULL);
     
     result->type        = digitzerType;
     result->collection  = digitizerCollection;
     result->touch       = 0;
     result->X = result->Y = result->Z = 0;
@@ -186,11 +186,11 @@
   
     if ( result->collection )
         result->collection->retain();
     
     result->elements = OSArray::withCapacity(4);
-    require_action(result->elements, exit, OSSafeReleaseNULL(result));
+    __Require_Action(result->elements, exit, OSSafeReleaseNULL(result));
     
 exit:
     return result;
 }
 
@@ -233,15 +233,15 @@
 //====================================================================================================
 bool IOHIDEventDriver::init( OSDictionary * dictionary )
 {
     bool result;
     
-    require_action(super::init(dictionary), exit, result=false);
+    __Require_Action(super::init(dictionary), exit, result=false);
 
     _reserved = IONew(ExpansionData, 1);
 
-    require_action(_reserved, exit, result=false);
+    __Require_Action(_reserved, exit, result=false);
 
     bzero(_reserved, sizeof(ExpansionData));
     
     _preferredAxisRemovalPercentage = kDefaultPreferredAxisRemovalPercentage;
     
@@ -469,11 +469,11 @@
     UInt32      count, index;
 
     if ( bootProtocol == kBootProtocolMouse )
         _bootSupport = kBootMouse;
     
-    require_action(elementArray, exit, result = false);
+    __Require_Action(elementArray, exit, result = false);
 
     _supportedElements = elementArray;
     _supportedElements->retain();
 
     for ( index=0, count=elementArray->getCount(); index<count; index++ ) {
@@ -519,19 +519,19 @@
               continue;
             }
 #endif
             if ( !pendingButtonElements ) {
                 pendingButtonElements = OSArray::withCapacity(4);
-                require_action(pendingButtonElements, exit, result = false);
+                __Require_Action(pendingButtonElements, exit, result = false);
             }
             pendingButtonElements->setObject(element);
             continue;
         }
         
         if ( !pendingElements ) {
             pendingElements = OSArray::withCapacity(4);
-            require_action(pendingElements, exit, result = false);
+            __Require_Action(pendingElements, exit, result = false);
         }
         
         pendingElements->setObject(element);
     }
     
@@ -610,17 +610,17 @@
     OSArray *               newTransducers      = NULL;
     OSArray *               orphanedElements    = NULL;
     DigitizerTransducer *   rootTransducer      = NULL;
     UInt32                  index, count;
     
-    require(_digitizer.transducers, exit);
+    __Require(_digitizer.transducers, exit);
     
     newTransducers = OSArray::withCapacity(4);
-    require(newTransducers, exit);
+    __Require(newTransducers, exit);
     
     orphanedElements = OSArray::withCapacity(4);
-    require(orphanedElements, exit);
+    __Require(orphanedElements, exit);
     
     // RY: Let's check for transducer validity. If there isn't an X axis, odds are
     // this transducer was created due to a malformed descriptor.  In this case,
     // let's collect the orphansed elements and insert them into the root transducer.
     for (index=0, count=_digitizer.transducers->getCount(); index<count; index++) {
@@ -665,11 +665,11 @@
             pendingElements->release();
     }
     
     OSSafeReleaseNULL(_digitizer.transducers);
     
-    require(newTransducers->getCount(), exit);
+    __Require(newTransducers->getCount(), exit);
     
     _digitizer.transducers = newTransducers;
     _digitizer.transducers->retain();
 
     if ( rootTransducer ) {
@@ -711,11 +711,11 @@
 
 void IOHIDEventDriver::processGameControllerElements()
 {
     UInt32 index, count;
     
-    require(_gameController.elements, exit);
+    __Require(_gameController.elements, exit);
     
     _gameController.extended = (_gameController.capable & GAME_CONTROLLER_EXTENDED_MASK) == GAME_CONTROLLER_EXTENDED_MASK;
     _gameController.formFitting = (_gameController.capable & GAME_CONTROLLER_FORM_FITTING_MASK) == GAME_CONTROLLER_FORM_FITTING_MASK;
     
     for (index=0, count=_gameController.elements->getCount(); index<count; index++) {
@@ -746,11 +746,11 @@
 //====================================================================================================
 void IOHIDEventDriver::processMultiAxisElements()
 {
     UInt32 translationMask, rotationMask, index, count;
     
-    require(_multiAxis.elements, exit);
+    __Require(_multiAxis.elements, exit);
     
     translationMask = (1<<GET_AXIS_INDEX(kHIDUsage_GD_X)) | (1<<GET_AXIS_INDEX(kHIDUsage_GD_Y));
     rotationMask    = (1<<GET_AXIS_INDEX(kHIDUsage_GD_Rx)) | (1<<GET_AXIS_INDEX(kHIDUsage_GD_Ry));
     
     for (index=0, count=_multiAxis.elements->getCount(); index<count; index++) {
@@ -812,12 +812,12 @@
 //====================================================================================================
 void IOHIDEventDriver::setRelativeProperties()
 {
     OSDictionary * properties = OSDictionary::withCapacity(4);
     
-    require(properties, exit);
-    require(_relative.elements, exit);
+    __Require(properties, exit);
+    __Require(_relative.elements, exit);
 
     properties->setObject(kIOHIDElementKey, _relative.elements);
     
     setProperty("RelativePointer", properties);
 
@@ -830,12 +830,12 @@
 //====================================================================================================
 void IOHIDEventDriver::setDigitizerProperties()
 {
     OSDictionary * properties = OSDictionary::withCapacity(4);
     
-    require(properties, exit);
-    require(_digitizer.transducers, exit);
+    __Require(properties, exit);
+    __Require(_digitizer.transducers, exit);
 
 #if TARGET_OS_TV
     _digitizer.collectionDispatch = true;
 #else
     if (conformTo (kHIDPage_AppleVendor, kHIDUsage_AppleVendor_DFR)) {
@@ -860,25 +860,25 @@
 void IOHIDEventDriver::setGameControllerProperties()
 {
     OSDictionary *  properties  = OSDictionary::withCapacity(4);
     OSNumber *      number      = NULL;
     
-    require(properties, exit);
-    require(_gameController.elements, exit);
+    __Require(properties, exit);
+    __Require(_gameController.elements, exit);
     
     properties->setObject(kIOHIDElementKey, _gameController.elements);
     
     number = OSNumber::withNumber(_gameController.capable, 32);
-    require(number, exit);
+    __Require(number, exit);
 
     properties->setObject("GameControllerCapabilities", number);
     OSSafeReleaseNULL(number);
     
     setProperty("GameControllerPointer", properties);
     
     number = OSNumber::withNumber(_gameController.extended ? kIOHIDGameControllerTypeExtended : kIOHIDGameControllerTypeStandard, 32);
-    require(number, exit);
+    __Require(number, exit);
 
     setProperty(kIOHIDGameControllerTypeKey, number);
     OSSafeReleaseNULL(number);
     
     if (_gameController.formFitting) {
@@ -895,17 +895,17 @@
 void IOHIDEventDriver::setMultiAxisProperties()
 {
     OSDictionary *  properties  = OSDictionary::withCapacity(4);
     OSNumber *      number      = NULL;
     
-    require(properties, exit);
-    require(_multiAxis.elements, exit);
+    __Require(properties, exit);
+    __Require(_multiAxis.elements, exit);
     
     properties->setObject(kIOHIDElementKey, _multiAxis.elements);
     
     number = OSNumber::withNumber(_multiAxis.capable, 32);
-    require(number, exit);
+    __Require(number, exit);
     
     properties->setObject("AxisCapabilities", number);
     
     setProperty("MultiAxisPointer", properties);
     
@@ -919,12 +919,12 @@
 //====================================================================================================
 void IOHIDEventDriver::setScrollProperties()
 {
     OSDictionary * properties = OSDictionary::withCapacity(4);
     
-    require(properties, exit);
-    require(_scroll.elements, exit);
+    __Require(properties, exit);
+    __Require(_scroll.elements, exit);
     
     properties->setObject(kIOHIDElementKey, _scroll.elements);
     
     setProperty("Scroll", properties);
     
@@ -937,12 +937,12 @@
 //====================================================================================================
 void IOHIDEventDriver::setLEDProperties()
 {
     OSDictionary * properties = OSDictionary::withCapacity(4);
     
-    require(properties, exit);
-    require(_led.elements, exit);
+    __Require(properties, exit);
+    __Require(_led.elements, exit);
     
     properties->setObject(kIOHIDElementKey, _led.elements);
     
     setProperty("LED", properties);
     
@@ -955,12 +955,12 @@
 //====================================================================================================
 void IOHIDEventDriver::setKeyboardProperties()
 {
     OSDictionary * properties = OSDictionary::withCapacity(4);
     
-    require(properties, exit);
-    require(_keyboard.elements, exit);
+    __Require(properties, exit);
+    __Require(_keyboard.elements, exit);
     
     properties->setObject(kIOHIDElementKey, _keyboard.elements);
     
     setProperty("Keyboard", properties);
     
@@ -974,14 +974,14 @@
 void IOHIDEventDriver::setUnicodeProperties()
 {
     OSDictionary * properties = NULL;
     OSSerializer * serializer = NULL;
     
-    require(_unicode.legacyElements || _unicode.gesturesCandidates, exit);
+    __Require(_unicode.legacyElements || _unicode.gesturesCandidates, exit);
     
     properties = OSDictionary::withCapacity(4);
-    require(properties, exit);
+    __Require(properties, exit);
 
     if ( _unicode.legacyElements ) {
         OSNumber * number = OSNumber::withNumber(_unicode.legacyElements->getCount(), 32);
         properties->setObject("Legacy", number);
         number->release();
@@ -992,11 +992,11 @@
     
     
     if ( _unicode.gestureStateElement ) {
         properties->setObject("GestureCharacterStateElement", _unicode.gestureStateElement);
         serializer = OSSerializer::forTarget(this, OSMemberFunctionCast(OSSerializerCallback, this, &IOHIDEventDriver::serializeCharacterGestureState));
-        require(serializer, exit);
+        __Require(serializer, exit);
         setProperty(kIOHIDDigitizerGestureCharacterStateKey, serializer);
     }
     
     setProperty("Unicode", properties);
     
@@ -1010,12 +1010,12 @@
 //====================================================================================================
 void IOHIDEventDriver::setVendorMessageProperties()
 {
     OSDictionary * properties = OSDictionary::withCapacity(4);
     
-    require(properties, exit);
-    require(_vendorMessage.elements, exit);
+    __Require(properties, exit);
+    __Require(_vendorMessage.elements, exit);
 
     properties->setObject(kIOHIDElementKey, _vendorMessage.elements);
     
     setProperty("VendorMessage", properties );
 
@@ -1028,12 +1028,12 @@
 //====================================================================================================
 void IOHIDEventDriver::setBiometricProperties()
 {
     OSDictionary *properties = OSDictionary::withCapacity(4);
     
-    require(properties, exit);
-    require(_biometric.elements, exit);
+    __Require(properties, exit);
+    __Require(_biometric.elements, exit);
     
     properties->setObject(kIOHIDElementKey, _biometric.elements);
     
     setProperty("Biometric", properties);
     
@@ -1134,16 +1134,16 @@
 {
     OSNumber *  number  = NULL;
     UInt32      value   = 0;
     bool        result  = false;
     
-    require(_unicode.gestureStateElement, exit);
+    __Require(_unicode.gestureStateElement, exit);
     
     value = _unicode.gestureStateElement->getValue();
     
     number = OSNumber::withNumber(value, 32);
-    require(number, exit);
+    __Require(number, exit);
     
     result = number->serialize(serializer);
     
 exit:
     OSSafeReleaseNULL(number);
@@ -1157,14 +1157,14 @@
 {
     IOReturn        result          = kIOReturnUnsupported;
     OSDictionary *  propertyDict    = OSDynamicCast(OSDictionary, properties);
     OSBoolean *     boolVal         = NULL;
     
-    require(propertyDict, exit);
+    __Require(propertyDict, exit);
     
     if ( (boolVal = OSDynamicCast(OSBoolean, propertyDict->getObject(kIOHIDDigitizerGestureCharacterStateKey)))) {
-        require(_unicode.gestureStateElement, exit);
+        __Require(_unicode.gestureStateElement, exit);
         
         _unicode.gestureStateElement->setValue(boolVal==kOSBooleanTrue ? 1 : 0);
         result = kIOReturnSuccess;
     }
     
@@ -1218,11 +1218,11 @@
         }
 
         break;
     }
     
-    require_action(parent, exit, result=false);
+    __Require_Action(parent, exit, result=false);
   
     if (element->getUsagePage() == kHIDPage_AppleVendorMultitouch && element->getUsage() == kHIDUsage_AppleVendorMultitouch_TouchCancel) {
         OSSafeReleaseNULL(_digitizer.touchCancelElement);
         element->retain();
         _digitizer.touchCancelElement = element;
@@ -1269,27 +1269,27 @@
         case kHIDPage_GenericDesktop:
             switch ( element->getUsage() ) {
                 case kHIDUsage_GD_X:
                 case kHIDUsage_GD_Y:
                 case kHIDUsage_GD_Z:
-                    require_action_quiet((element->getFlags() & kIOHIDElementFlagsRelativeMask) == 0, exit, result=false);
+                    __Require_Action_Quiet((element->getFlags() & kIOHIDElementFlagsRelativeMask) == 0, exit, result=false);
                     shouldCalibrate = true;
                     break;
             }
             break;
     }
     
-    require_action(GetReportType(element->getType()) == kIOHIDReportTypeInput, exit, result=false);
+    __Require_Action(GetReportType(element->getType()) == kIOHIDReportTypeInput, exit, result=false);
     
     // If we are coming in through non digitizer origins, only allow this if we don't already have digitizer support
     if ( !parent ) {
-        require_action(!_digitizer.native, exit, result=false);
+        __Require_Action(!_digitizer.native, exit, result=false);
     }
 
     if ( !_digitizer.transducers ) {
         _digitizer.transducers = OSArray::withCapacity(4);
-        require_action(_digitizer.transducers, exit, result=false);
+        __Require_Action(_digitizer.transducers, exit, result=false);
     }
     
     // go through exising transducers
     for ( index=0,count=_digitizer.transducers->getCount(); index<count; index++) {
         DigitizerTransducer * tempTransducer;
@@ -1323,11 +1323,11 @@
                     break;
             }
         }
         
         transducer = DigitizerTransducer::transducer(type, parent);
-        require_action(transducer, exit, result=false);
+        __Require_Action(transducer, exit, result=false);
         
         _digitizer.transducers->setObject(transducer);
         transducer->release();
     }
     
@@ -1348,15 +1348,15 @@
 {
     UInt32 usagePage    = element->getUsagePage();
     bool   store        = false;
     bool   ret          = false;
     
-    require(_authenticatedDevice, exit);
+    __Require(_authenticatedDevice, exit);
     
     if ( !_gameController.elements ) {
         _gameController.elements = OSArray::withCapacity(4);
-        require(_gameController.elements, exit);
+        __Require(_gameController.elements, exit);
     }
     
     switch ( usagePage ) {
         case kHIDPage_GenericDesktop:
         case kHIDPage_Button:
@@ -1371,11 +1371,11 @@
 	case kHIDPage_LEDs:
             store = true;
             break;
     }
     
-    require(store, exit);
+    __Require(store, exit);
     
     _gameController.elements->setObject(element);
     
 exit:
     return ret;
@@ -1390,11 +1390,11 @@
     UInt32 usage        = element->getUsage();
     bool   store        = false;
     
     if ( !_multiAxis.elements ) {
         _multiAxis.elements = OSArray::withCapacity(4);
-        require(_multiAxis.elements, exit);
+        __Require(_multiAxis.elements, exit);
     }
     
     switch ( usagePage ) {
         case kHIDPage_GenericDesktop:
             switch ( usage ) {
@@ -1413,11 +1413,11 @@
                     break;
             }
             break;
     }
     
-    require(store, exit);
+    __Require(store, exit);
     
     _multiAxis.elements->setObject(element);
 
 exit:
     return store;
@@ -1432,11 +1432,11 @@
     UInt32 usage        = element->getUsage();
     bool   store        = false;
     
     if ( !_relative.elements ) {
         _relative.elements = OSArray::withCapacity(4);
-        require(_relative.elements, exit);
+        __Require(_relative.elements, exit);
     }
 
     switch ( usagePage ) {
         case kHIDPage_GenericDesktop:
             switch ( usage ) {
@@ -1449,11 +1449,11 @@
                     break;
             }
             break;
     }
     
-    require(store, exit);
+    __Require(store, exit);
     
     _relative.elements->setObject(element);
 
 exit:
     return store;
@@ -1468,11 +1468,11 @@
     UInt32 usage        = element->getUsage();
     bool   store        = false;
     
     if ( !_scroll.elements ) {
         _scroll.elements = OSArray::withCapacity(4);
-        require(_scroll.elements, exit);
+        __Require(_scroll.elements, exit);
     }
 
     switch ( usagePage ) {
         case kHIDPage_GenericDesktop:
             switch ( usage ) {
@@ -1495,11 +1495,11 @@
                     break;
             }
             break;
     }
     
-    require(store, exit);
+    __Require(store, exit);
     
     _scroll.elements->setObject(element);
 
 exit:
     return store;
@@ -1513,20 +1513,20 @@
     UInt32 usagePage    = element->getUsagePage();
     bool   store        = false;
     
     if ( !_led.elements ) {
         _led.elements = OSArray::withCapacity(4);
-        require(_led.elements, exit);
+        __Require(_led.elements, exit);
     }
     
     switch ( usagePage ) {
         case kHIDPage_LEDs:
             store = true;
             break;
     }
     
-    require(store, exit);
+    __Require(store, exit);
     
     _led.elements->setObject(element);
     
 exit:
     return store;
@@ -1542,11 +1542,11 @@
     UInt32 usage        = element->getUsage();
     bool   store        = false;
   
     if ( !_keyboard.elements ) {
         _keyboard.elements = OSArray::withCapacity(4);
-        require(_keyboard.elements, exit);
+        __Require(_keyboard.elements, exit);
     }
 
     switch ( usagePage ) {
         case kHIDPage_GenericDesktop:
             switch ( usage ) {
@@ -1649,11 +1649,11 @@
                 }
             }
             break;
     }
     
-    require(store, exit);
+    __Require(store, exit);
     
     _keyboard.elements->setObject(element);
 
 exit:
     return store;
@@ -1666,11 +1666,11 @@
 bool IOHIDEventDriver::parseUnicodeElement(IOHIDElement * element)
 {
     bool store = false;
 
     store = parseLegacyUnicodeElement(element);
-    require(!store, exit);
+    __Require(!store, exit);
     
     store = parseGestureUnicodeElement(element);
 
 exit:
     return store;
@@ -1684,14 +1684,14 @@
     UInt32 usagePage    = element->getUsagePage();
     bool   store        = false;
     
     if ( !_unicode.legacyElements ) {
         _unicode.legacyElements = OSArray::withCapacity(4);
-        require(_unicode.legacyElements, exit);
+        __Require(_unicode.legacyElements, exit);
     }
     
-    require(usagePage==kHIDPage_Unicode, exit);
+    __Require(usagePage==kHIDPage_Unicode, exit);
     
     _unicode.legacyElements->setObject(element);
     store = true;
     
 exit:
@@ -1736,11 +1736,11 @@
             break;
         default:
             break;
     }
     
-    require(result, exit);
+    __Require(result, exit);
 
     parent = element;
     while ( (parent = parent->getParentElement()) ) {
         switch ( parent->getCollectionType() ) {
             case kIOHIDElementCollectionTypeLogical:
@@ -1757,17 +1757,17 @@
             continue;
         
         break;
     }
     
-    require_action(parent, exit, result=false);
+    __Require_Action(parent, exit, result=false);
     
-    require_action(GetReportType(element->getType()) == kIOHIDReportTypeInput, exit, result=false);
+    __Require_Action(GetReportType(element->getType()) == kIOHIDReportTypeInput, exit, result=false);
     
     if ( !_unicode.gesturesCandidates ) {
         _unicode.gesturesCandidates = OSArray::withCapacity(4);
-        require_action(_unicode.gesturesCandidates, exit, result=false);
+        __Require_Action(_unicode.gesturesCandidates, exit, result=false);
     }
     
     // go through exising transducers
     for ( index=0,count=_unicode.gesturesCandidates->getCount(); index<count; index++) {
         EventElementCollection * tempCandidate;
@@ -1784,11 +1784,11 @@
     }
     
     // no match, let's create one
     if ( !candidate ) {
         candidate = EventElementCollection::candidate(parent);
-        require_action(candidate, exit, result=false);
+        __Require_Action(candidate, exit, result=false);
         
         _unicode.gesturesCandidates->setObject(candidate);
         candidate->release();
     }
     
@@ -1830,11 +1830,11 @@
          parent->getCollectionType() == kIOHIDElementCollectionTypePhysical) &&
         parent->getUsagePage() == kHIDPage_AppleVendor &&
         parent->getUsage() == kHIDUsage_AppleVendor_Message) {
         if (!_vendorMessage.elements) {
             _vendorMessage.elements = OSArray::withCapacity(1);
-            require(_vendorMessage.elements, exit);
+            __Require(_vendorMessage.elements, exit);
         }
         _vendorMessage.elements->setObject(element);
          result = true;
     }
 exit:
@@ -1850,11 +1850,11 @@
     UInt32 usage        = element->getUsage();
     bool   store        = false;
     
     if (!_biometric.elements) {
         _biometric.elements = OSArray::withCapacity(4);
-        require(_biometric.elements, exit);
+        __Require(_biometric.elements, exit);
     }
     
     switch (usagePage) {
         case kHIDPage_Sensor:
             switch (usage) {
@@ -1864,11 +1864,11 @@
                     break;
             }
             break;
     }
     
-    require(store, exit);
+    __Require(store, exit);
     _biometric.elements->setObject(element);
     
 exit:
     return store;
 }
@@ -1885,19 +1885,19 @@
     UInt32 offset   = 0;
     UInt32 usagePage= element->getUsagePage();
     UInt32 usage    = element->getUsage();
     bool   preferred=false;
 
-    require(!element->conformsTo(kHIDPage_GenericDesktop, kHIDUsage_GD_Mouse), exit);
-    require(!element->conformsTo(kHIDPage_Digitizer), exit);
-    require(element->conformsTo(kHIDPage_GenericDesktop, kHIDUsage_GD_GamePad) ||
+    __Require(!element->conformsTo(kHIDPage_GenericDesktop, kHIDUsage_GD_Mouse), exit);
+    __Require(!element->conformsTo(kHIDPage_Digitizer), exit);
+    __Require(element->conformsTo(kHIDPage_GenericDesktop, kHIDUsage_GD_GamePad) ||
             element->conformsTo(kHIDPage_GenericDesktop, kHIDUsage_GD_Joystick), exit);
-    require((element->getFlags() & (kIOHIDElementFlagsNoPreferredMask|kIOHIDElementFlagsRelativeMask)) == 0, exit);
+    __Require((element->getFlags() & (kIOHIDElementFlagsNoPreferredMask|kIOHIDElementFlagsRelativeMask)) == 0, exit);
 
     switch (usagePage) {
         case kHIDPage_GenericDesktop:
-            require((element->getFlags() & kIOHIDElementFlagsVariableMask) != 0, exit);
+            __Require((element->getFlags() & kIOHIDElementFlagsVariableMask) != 0, exit);
             
             switch (usage) {
                 case kHIDUsage_GD_X:
                 case kHIDUsage_GD_Y:
                 case kHIDUsage_GD_Z:
@@ -1919,11 +1919,11 @@
             }
             
             break;
             
         case kHIDPage_Button:
-            require(usage >= 1 && usage <= 8, exit);
+            __Require(usage >= 1 && usage <= 8, exit);
             
             base = kHIDUsage_Button_1;
             offset = 0;
             
             break;
@@ -1957,13 +1957,13 @@
 //====================================================================================================
 UInt32 IOHIDEventDriver::checkMultiAxisElement(IOHIDElement * element)
 {
     UInt32 result = 0;
     
-    require((element->getFlags() & kIOHIDElementFlagsVariableMask) != 0, exit);
-    require(!element->conformsTo(kHIDPage_GenericDesktop, kHIDUsage_GD_Mouse), exit);
-    require(!element->conformsTo(kHIDPage_Digitizer), exit);
+    __Require((element->getFlags() & kIOHIDElementFlagsVariableMask) != 0, exit);
+    __Require(!element->conformsTo(kHIDPage_GenericDesktop, kHIDUsage_GD_Mouse), exit);
+    __Require(!element->conformsTo(kHIDPage_Digitizer), exit);
     
     if ( ((element->getFlags() & (kIOHIDElementFlagsNoPreferredMask|kIOHIDElementFlagsRelativeMask)) == 0) ||
          element->conformsTo(kHIDPage_GenericDesktop, kHIDUsage_GD_MultiAxisController) ||
          element->conformsTo(kHIDPage_GenericDesktop, kHIDUsage_GD_Joystick) ) {
         result = (1<<(element->getUsage()-kHIDUsage_GD_X));
@@ -2066,16 +2066,16 @@
     IOByteCount     reportLength    = 0;
     UInt32          buttonState     = 0;
     SInt32          dX              = 0;
     SInt32          dY              = 0;
 
-    require((_bootSupport & kBootMouse) == kBootMouse, exit);
-    require(reportID==0, exit);
+    __Require((_bootSupport & kBootMouse) == kBootMouse, exit);
+    __Require(reportID==0, exit);
 
     // Get a pointer to the data in the descriptor.
     reportLength = report->getLength();
-    require(reportLength >= sizeof(_keyboard.bootMouseData), exit);
+    __Require(reportLength >= sizeof(_keyboard.bootMouseData), exit);
 
     report->readBytes( 0, (void *)_keyboard.bootMouseData, sizeof(_keyboard.bootMouseData) );
     
     if ( _multipleReports )
         bootOffset = 1;
@@ -2099,13 +2099,13 @@
 {
     bool        handled     = false;
     UInt32      index, count;
     
     
-    require_quiet(_gameController.capable, exit);
+    __Require_Quiet(_gameController.capable, exit);
     
-    require_quiet(_gameController.elements, exit);
+    __Require_Quiet(_gameController.elements, exit);
     
     for (index=0, count=_gameController.elements->getCount(); index<count; index++) {
         IOHIDElement *  element;
         IOFixed         elementFixedVal;
         IOFixed *       gcFixedVal = NULL;
@@ -2192,13 +2192,13 @@
             handled = true;
         }
     }
     
     // Don't dispatch an event if no controller elements have changed since the last dispatch.
-    require_quiet(handled, exit);
+    __Require_Quiet(handled, exit);
     
-    require_quiet(reportID == _gameController.sendingReportID, exit);
+    __Require_Quiet(reportID == _gameController.sendingReportID, exit);
     
     if ( _gameController.extended ) {
         dispatchExtendedGameControllerEvent(timeStamp, _gameController.dpad.up, _gameController.dpad.down, _gameController.dpad.left, _gameController.dpad.right, _gameController.face.x, _gameController.face.y, _gameController.face.a, _gameController.face.b, _gameController.shoulder.l1, _gameController.shoulder.r1, _gameController.shoulder.l2, _gameController.shoulder.r2, _gameController.joystick.x, _gameController.joystick.y, _gameController.joystick.z, _gameController.joystick.rz);
     } else {
         dispatchStandardGameControllerEvent(timeStamp, _gameController.dpad.up, _gameController.dpad.down, _gameController.dpad.left, _gameController.dpad.right, _gameController.face.x, _gameController.face.y, _gameController.face.a, _gameController.face.b, _gameController.shoulder.l1, _gameController.shoulder.r1);
@@ -2215,15 +2215,15 @@
 void IOHIDEventDriver::handleMultiAxisPointerReport(AbsoluteTime timeStamp, UInt32 reportID)
 {
     bool        handled     = false;
     UInt32      index, count;
     
-    require_quiet(!_multiAxis.disabled, exit);
+    __Require_Quiet(!_multiAxis.disabled, exit);
 
-    require_quiet(_multiAxis.capable, exit);
+    __Require_Quiet(_multiAxis.capable, exit);
 
-    require_quiet(_multiAxis.elements, exit);
+    __Require_Quiet(_multiAxis.elements, exit);
 
     for (index=0, count=_multiAxis.elements->getCount(); index<count; index++) {
         IOHIDElement *  element;
         AbsoluteTime    elementTimeStamp;
         UInt32          usagePage, usage;
@@ -2261,13 +2261,13 @@
                 setButtonState(&_multiAxis.buttonState, (usage - 1), element->getValue());
                 break;
         }
     }
 
-    require_quiet(handled, exit);
+    __Require_Quiet(handled, exit);
     
-    require_quiet(reportID == _multiAxis.sendingReportID, exit);
+    __Require_Quiet(reportID == _multiAxis.sendingReportID, exit);
 
     dispatchMultiAxisPointerEvent(timeStamp, _multiAxis.buttonState, _multiAxis.axis[GET_AXIS_INDEX(kHIDUsage_GD_X)], _multiAxis.axis[GET_AXIS_INDEX(kHIDUsage_GD_Y)], _multiAxis.axis[GET_AXIS_INDEX(kHIDUsage_GD_Z)], _multiAxis.axis[GET_AXIS_INDEX(kHIDUsage_GD_Rx)], _multiAxis.axis[GET_AXIS_INDEX(kHIDUsage_GD_Ry)], _multiAxis.axis[GET_AXIS_INDEX(kHIDUsage_GD_Rz)], _multiAxis.options);
 exit:
     return;
 }
@@ -2281,13 +2281,13 @@
     SInt32      dX          = 0;
     SInt32      dY          = 0;
     UInt32      buttonState = 0;
     UInt32      index, count;
     
-    require_quiet(!_relative.disabled, exit);
+    __Require_Quiet(!_relative.disabled, exit);
     
-    require_quiet(_relative.elements, exit);
+    __Require_Quiet(_relative.elements, exit);
 
     for (index=0, count=_relative.elements->getCount(); index<count; index++) {
         IOHIDElement *  element;
         AbsoluteTime    elementTimeStamp;
         UInt32          usagePage, usage;
@@ -2320,11 +2320,11 @@
                 setButtonState(&buttonState, (usage - 1), element->getValue());
                 break;
         }
     }
     
-    require_quiet(handled, exit);
+    __Require_Quiet(handled, exit);
     
     dispatchRelativePointerEvent(timeStamp, dX, dY, buttonState);
     
 exit:
     return;
@@ -2335,11 +2335,11 @@
 //====================================================================================================
 void IOHIDEventDriver::handleDigitizerReport(AbsoluteTime timeStamp, UInt32 reportID)
 {
     UInt32 index, count;
 
-    require_quiet(_digitizer.transducers, exit);
+    __Require_Quiet(_digitizer.transducers, exit);
   
     if (_digitizer.collectionDispatch) {
       
         handleDigitizerCollectionReport (timeStamp, reportID);
         return;
@@ -2389,11 +2389,11 @@
             collectionEvent = IOHIDEvent::digitizerEvent(timeStamp, 0, kIOHIDDigitizerTransducerTypeFinger, false, 0, 0, 0, 0, 0, 0, 0, 0);
           mask |= _digitizer.touchCancelElement->getValue() ? kIOHIDDigitizerEventCancel : 0;
         }
     }
 
-    require_quiet(_digitizer.transducers, exit);
+    __Require_Quiet(_digitizer.transducers, exit);
   
     for (index=0, count = _digitizer.transducers->getCount(); index<count; index++) {
         DigitizerTransducer * transducer = NULL;
         
         transducer = OSDynamicCast(DigitizerTransducer, _digitizer.transducers->getObject(index));
@@ -2403,11 +2403,11 @@
       
         event = createDigitizerTransducerEventForReport(transducer, timeStamp, reportID);
         if (event) {
             if (collectionEvent == NULL) {
                 collectionEvent = IOHIDEvent::digitizerEvent(timeStamp, 0, kIOHIDDigitizerTransducerTypeFinger, false, 0, 0, 0, 0, 0, 0, 0, 0);
-                require_quiet(collectionEvent, exit);
+                __Require_Quiet(collectionEvent, exit);
                 collectionEvent->setIntegerValue(kIOHIDEventFieldDigitizerCollection, TRUE);
             }
             bool eventTouch = event->getIntegerValue(kIOHIDEventFieldDigitizerTouch) ? true : false;
             if (eventTouch) {
                 touchX += event->getFixedValue (kIOHIDEventFieldDigitizerX);
@@ -2481,11 +2481,11 @@
     IOFixed                 twist           = 0;
     bool                    invert          = false;
     bool                    inRange         = true;
     bool                    valid           = true;
   
-    require_quiet(transducer->elements, exit);
+    __Require_Quiet(transducer->elements, exit);
 
     for (elementIndex=0, elementCount=transducer->elements->getCount(); elementIndex<elementCount; elementIndex++) {
         IOHIDElement *  element;
         AbsoluteTime    elementTimeStamp;
         bool            elementIsCurrent;
@@ -2584,13 +2584,13 @@
                 }
                 break;
         }        
     }
     
-    require(handled, exit);
+    __Require(handled, exit);
     
-    require(valid, exit);
+    __Require(valid, exit);
 
     dispatchDigitizerEventWithTiltOrientation(timeStamp, transducerID, transducer->type, inRange, buttonState, X, Y, Z, tipPressure, barrelPressure, twist, tiltX, tiltY, invert ? IOHIDEventService::kDigitizerInvert : 0);
 
 exit:
 
@@ -2623,11 +2623,11 @@
     UInt32                  eventMask       = 0;
     UInt32                  eventOptions    = 0;
     UInt32                  touch           = 0;
     IOHIDEvent              *event          = NULL;
   
-    require_quiet(transducer->elements, exit);
+    __Require_Quiet(transducer->elements, exit);
   
   
     for (elementIndex=0, elementCount=transducer->elements->getCount(); elementIndex<elementCount; elementIndex++) {
         IOHIDElement *  element;
         AbsoluteTime    elementTimeStamp;
@@ -2731,16 +2731,16 @@
                 }
                 break;
         }        
     }
   
-    require(handled, exit);
+    __Require(handled, exit);
     
-    require(valid, exit);
+    __Require(valid, exit);
 
     event = IOHIDEvent::digitizerEvent(timeStamp, transducerID, transducer->type, inRange, buttonState, X, Y, Z, tipPressure, barrelPressure, twist, eventOptions);
-    require(event, exit);
+    __Require(event, exit);
 
 
     if ( tipPressure ) {
         touch |= 1;
     } else {
@@ -2786,11 +2786,11 @@
     IOFixed     scrollVert  = 0;
     IOFixed     scrollHoriz = 0;
 
     UInt32      index, count;
     
-    require_quiet(_scroll.elements, exit);
+    __Require_Quiet(_scroll.elements, exit);
 
     for (index=0, count=_scroll.elements->getCount(); index<count; index++) {
         IOHIDElement *  element;
         AbsoluteTime    elementTimeStamp;
         UInt32          usagePage, usage;
@@ -2835,11 +2835,11 @@
             default:
                 break;
         }
     }
     
-    require(scrollVert || scrollHoriz, exit);
+    __Require(scrollVert || scrollHoriz, exit);
   
     dispatchScrollWheelEventWithFixed(timeStamp, scrollVert, scrollHoriz, 0);
     
 exit:
     return;
@@ -2852,11 +2852,11 @@
 {
     UInt32      volumeHandled   = 0;
     UInt32      volumeState     = 0;
     UInt32      index, count;
     
-    require_quiet(_keyboard.elements, exit);
+    __Require_Quiet(_keyboard.elements, exit);
     
     for (index=0, count=_keyboard.elements->getCount(); index<count; index++) {
         IOHIDElement *  element;
         AbsoluteTime    elementTimeStamp;
         UInt32          usagePage, usage, value, preValue;
@@ -2952,11 +2952,11 @@
 //====================================================================================================
 void IOHIDEventDriver::handleUnicodeLegacyReport(AbsoluteTime timeStamp, UInt32 reportID)
 {
     UInt32      index, count;
     
-    require_quiet(_unicode.legacyElements, exit);
+    __Require_Quiet(_unicode.legacyElements, exit);
 
     for (index=0, count=_unicode.legacyElements->getCount(); index<count; index++) {
         IOHIDElement *  element;
         AbsoluteTime    elementTimeStamp;
         
@@ -2997,11 +2997,11 @@
 void IOHIDEventDriver::handleUnicodeGestureReport(AbsoluteTime timeStamp, UInt32 reportID)
 {
     IOHIDEvent * main = NULL;
     UInt32 index, count;
     
-    require_quiet(_unicode.gesturesCandidates, exit);
+    __Require_Quiet(_unicode.gesturesCandidates, exit);
     
     for (index=0, count=_unicode.gesturesCandidates->getCount(); index<count; index++) {
         EventElementCollection *  candidate   = NULL;
         IOHIDEvent *        event       = NULL;
         
@@ -3020,11 +3020,11 @@
             main->retain();
         }
         event->release();
     }
     
-    require(main, exit);
+    __Require(main, exit);
     
     dispatchEvent(main);
     
     main->release();
     
@@ -3044,11 +3044,11 @@
     UnicodeEncodingType encoding      = kUnicodeEncodingTypeUTF16LE;
     IOFixed             quality       = (1<<16);
     bool                handled       = false;
     uint32_t            index, count;
     OSData *            payloadData   = NULL;
-    require(candidate->elements, exit);
+    __Require(candidate->elements, exit);
     
     for ( index=0, count=candidate->elements->getCount(); index<count; index++ ) {
         IOHIDElement *  element;
         AbsoluteTime    elementTimeStamp;
         bool            elementIsCurrent;
@@ -3110,11 +3110,11 @@
             default:
                 break;
         }
     }
     
-    require(handled, exit);
+    __Require(handled, exit);
     
     result = IOHIDEvent::unicodeEvent(timeStamp, payload, payloadLength < length ? payloadLength : length, encoding, quality, 0);
 
 exit:
     return result;
@@ -3197,11 +3197,11 @@
 {
     IOFixed                     level = 0;
     UInt32                      index, count;
     IOHIDBiometricEventType     eventType;
     
-    require_quiet(_biometric.elements, exit);
+    __Require_Quiet(_biometric.elements, exit);
     
     for (index = 0, count = _biometric.elements->getCount(); index < count; index++) {
         IOHIDElement *  element;
         AbsoluteTime    elementTimeStamp;
         UInt32          usagePage, usage, value;
@@ -3284,16 +3284,16 @@
                                 UInt32                      value )
 {
     IOHIDElement *element = NULL;
     uint32_t count, index;
 
-    require(usagePage == kHIDPage_LEDs , exit);
+    __Require(usagePage == kHIDPage_LEDs , exit);
     
-    require(_led.elements, exit);
+    __Require(_led.elements, exit);
     
     count = _led.elements->getCount();
-    require(count, exit);
+    __Require(count, exit);
     
     for (index=0; index<count; index++) {
         IOHIDElement * temp = OSDynamicCast(IOHIDElement, _led.elements->getObject(index));
         
         if ( !temp )
@@ -3304,11 +3304,11 @@
         
         element = temp;
         break;
     }
     
-    require(element, exit);
+    __Require(element, exit);
     element->setValue(value);
     return kIOReturnSuccess;
 exit:
     return kIOReturnUnsupported;
 }
@@ -3321,16 +3321,16 @@
                                 UInt32                      usage )
 {
     IOHIDElement *element = NULL;
     uint32_t count, index;
     
-    require(usagePage == kHIDPage_LEDs , exit);
+    __Require(usagePage == kHIDPage_LEDs , exit);
     
-    require(_led.elements, exit);
+    __Require(_led.elements, exit);
     
     count = _led.elements->getCount();
-    require(count, exit);
+    __Require(count, exit);
     
     for (index=0; index<count; index++) {
         IOHIDElement * temp = OSDynamicCast(IOHIDElement, _led.elements->getObject(index));
         
         if ( !temp )
@@ -3355,11 +3355,11 @@
     uint64_t      currentTime,deltaTime;
     uint64_t      nanoTime;
     OSNumber      *num;
     OSDictionary  *debugDict = OSDictionary::withCapacity(4);
   
-    require(debugDict, exit);
+    __Require(debugDict, exit);
   
     if (_lastReportTime) {
         currentTime =  mach_continuous_time();
         deltaTime = AbsoluteTime_to_scalar(&currentTime) - AbsoluteTime_to_scalar(&(_lastReportTime));
 
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEventService.cpp B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEventService.cpp
--- A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEventService.cpp	2017-07-25 00:30:27.000000000 +0100
+++ B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEventService.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -775,16 +775,16 @@
 #if !TARGET_OS_EMBEDDED // {
     bool            isDispatcher = ((options & kShimEventProcessor) == 0);
     IOHIDPointing   *pointingNub = IOHIDPointing::Pointing(buttonCount, pointerResolution, scrollResolution, isDispatcher);;
     OSNumber        *value;
     
-    require(pointingNub, no_nub);
+    __Require(pointingNub, no_nub);
 
 	SET_HID_PROPERTIES(pointingNub);
 
-    require(pointingNub->attach(this), no_attach);
-    require(pointingNub->start(this), no_start);
+    __Require(pointingNub->attach(this), no_attach);
+    __Require(pointingNub->start(this), no_start);
     value = OSNumber::withNumber(getRegistryEntryID(), 64);
     if (value) {
         pointingNub->setProperty(kIOHIDAltSenderIdKey, value);
         value->release();
     }
@@ -813,16 +813,16 @@
 {
 #if !TARGET_OS_EMBEDDED // {
     bool            isDispatcher = ((options & kShimEventProcessor) == 0);
     IOHIDKeyboard   *keyboardNub = IOHIDKeyboard::Keyboard(supportedModifiers, isDispatcher);
 
-    require(keyboardNub, no_nub);
+    __Require(keyboardNub, no_nub);
 
         SET_HID_PROPERTIES(keyboardNub);
 
-    require(keyboardNub->attach(this), no_attach);
-    require(keyboardNub->start(this), no_start);
+    __Require(keyboardNub->attach(this), no_attach);
+    __Require(keyboardNub->start(this), no_start);
     keyboardNub->setProperty(kIOHIDAltSenderIdKey, OSNumber::withNumber(getRegistryEntryID(), 64));
 
     return keyboardNub;
 
 no_start:
@@ -845,16 +845,16 @@
 {
 #if !TARGET_OS_EMBEDDED // {
     bool            isDispatcher = ((options & kShimEventProcessor) == 0);
     IOHIDConsumer   *consumerNub = IOHIDConsumer::Consumer(isDispatcher);;
 
-    require(consumerNub, no_nub);
+    __Require(consumerNub, no_nub);
 
         SET_HID_PROPERTIES(consumerNub);
 
-    require(consumerNub->attach(this), no_attach);
-    require(consumerNub->start(this), no_start);
+    __Require(consumerNub->attach(this), no_attach);
+    __Require(consumerNub->start(this), no_start);
     consumerNub->setProperty(kIOHIDAltSenderIdKey, OSNumber::withNumber(getRegistryEntryID(), 64));
 
     return consumerNub;
 
 no_start:
@@ -2128,11 +2128,11 @@
 
     if ( options & kDigitizerInvert )
         eventOptions |= kIOHIDTransducerInvert;
 
     childEvent = IOHIDEvent::digitizerEvent(timeStamp, transducerID, type, inRange, buttonState, x, y, z, tipPressure, auxPressure, twist, eventOptions);
-    require(childEvent, exit);
+    __Require(childEvent, exit);
 
     buttonState |= (tipPressure>>16) & 1;
 
     if ( tipPressure )
         touch |= 1;
@@ -2160,11 +2160,11 @@
 
 
     childEvent->setIntegerValue(kIOHIDEventFieldDigitizerEventMask, eventMask);
 
     collectionEvent = IOHIDEvent::digitizerEvent(timeStamp, transducerID, type, inRange, buttonState, x, y, z, tipPressure, auxPressure, twist, eventOptions);
-    require(collectionEvent, exit);
+    __Require(collectionEvent, exit);
 
     collectionEvent->setIntegerValue(kIOHIDEventFieldDigitizerCollection, TRUE);
     collectionEvent->setIntegerValue(kIOHIDEventFieldDigitizerRange, childEvent->getIntegerValue(kIOHIDEventFieldDigitizerRange));
     collectionEvent->setIntegerValue(kIOHIDEventFieldDigitizerEventMask, childEvent->getIntegerValue(kIOHIDEventFieldDigitizerEventMask));
     collectionEvent->setIntegerValue(kIOHIDEventFieldDigitizerTouch, childEvent->getIntegerValue(kIOHIDEventFieldDigitizerTouch));
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEventServiceFastPathUserClient.cpp B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEventServiceFastPathUserClient.cpp
--- A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEventServiceFastPathUserClient.cpp	2017-09-05 16:41:49.000000000 +0100
+++ B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEventServiceFastPathUserClient.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -85,11 +85,11 @@
 IOReturn IOHIDEventServiceFastPathUserClient::clientMemoryForType(UInt32 type __unused, IOOptionBits * options, IOMemoryDescriptor ** memory)
 {
   
     IOReturn result;
     
-    require_action(!_opened || !isInactive(), exit, result = kIOReturnOffline);
+    __Require_Action(!_opened || !isInactive(), exit, result = kIOReturnOffline);
     
     result = _commandGate->runAction(
                                      OSMemberFunctionCast(IOCommandGate::Action, this, &IOHIDEventServiceFastPathUserClient::clientMemoryForTypeGated),
                                      options,
                                      memory
@@ -138,11 +138,11 @@
                                                      void *                      reference)
 {
     IOReturn result;
     ExternalMethodGatedArguments gatedArguments = {selector, arguments, dispatch, target, reference};
     
-    require_action(!isInactive(), exit, result = kIOReturnOffline);
+    __Require_Action(!isInactive(), exit, result = kIOReturnOffline);
     
     if (selector != kIOHIDEventServiceFastPathUserClientCopyEvent) {
         result = _commandGate->runAction(OSMemberFunctionCast(IOCommandGate::Action, this, &IOHIDEventServiceFastPathUserClient::externalMethodGated), &gatedArguments);
     } else {
         result = externalMethodGated(&gatedArguments);
@@ -158,13 +158,13 @@
 //==============================================================================
 IOReturn IOHIDEventServiceFastPathUserClient::externalMethodGated(ExternalMethodGatedArguments *arguments)
 {
     IOReturn result;
     
-    require_action(!isInactive(), exit, result = kIOReturnOffline);
+    __Require_Action(!isInactive(), exit, result = kIOReturnOffline);
     
-    require_action(arguments->selector < (uint32_t) kIOHIDEventServiceFastPathUserClientNumCommands, exit, result=kIOReturnBadArgument);
+    __Require_Action(arguments->selector < (uint32_t) kIOHIDEventServiceFastPathUserClientNumCommands, exit, result=kIOReturnBadArgument);
     
     arguments->dispatch = (IOExternalMethodDispatch *) &sMethods[arguments->selector];
     if (!arguments->target) {
         arguments->target = this;
     }
@@ -194,25 +194,25 @@
 {
     IOWorkLoop *    workLoop;
     boolean_t       result = false;
     OSSerializer *  debugStateSerializer;
     
-    require (super::start(provider), exit);
+    __Require (super::start(provider), exit);
     
     _lock = IOLockAlloc();
-    require (_lock, exit);
+    __Require (_lock, exit);
 
     _owner = OSDynamicCast(IOHIDEventService, provider);
-    require (_owner, exit);
+    __Require (_owner, exit);
     
     _owner->retain();
  
     workLoop = getWorkLoop();
-    require(workLoop, exit);
+    __Require(workLoop, exit);
   
     _commandGate = IOCommandGate::commandGate(this);
-    require(_commandGate, exit);
+    __Require(_commandGate, exit);
   
     debugStateSerializer = OSSerializer::forTarget(
                               this,
                               OSMemberFunctionCast(OSSerializerCallback,
                               this,
@@ -221,11 +221,11 @@
     if (debugStateSerializer) {
         setProperty("DebugState", debugStateSerializer);
         debugStateSerializer->release();
     }
 
-    require(workLoop->addEventSource(_commandGate) == kIOReturnSuccess, exit);
+    __Require(workLoop->addEventSource(_commandGate) == kIOReturnSuccess, exit);
 
     result = true;
 
 exit:
     
@@ -504,11 +504,11 @@
 bool   IOHIDEventServiceFastPathUserClient::serializeDebugState(void * ref __unused, OSSerialize * serializer)
 {
     bool          result = false;
     OSDictionary  *debugDict = OSDictionary::withCapacity(6);
     
-    require(debugDict, exit);
+    __Require(debugDict, exit);
     
     if (_queue) {
         debugDict->setObject("EventQueue", _queue);
     }
     
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEventServiceUserClient.cpp B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEventServiceUserClient.cpp
--- A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEventServiceUserClient.cpp	2017-09-27 21:16:13.000000000 +0100
+++ B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDEventServiceUserClient.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -116,11 +116,11 @@
                                                                IOMemoryDescriptor **       memory )
 {
   
     IOReturn result;
     
-    require_action(!isInactive(), exit, result=kIOReturnOffline);
+    __Require_Action(!isInactive(), exit, result=kIOReturnOffline);
     
     result = _commandGate->runAction(OSMemberFunctionCast(IOCommandGate::Action, this, &IOHIDEventServiceUserClient::clientMemoryForTypeGated), options, memory);
   
 exit:
   
@@ -171,11 +171,11 @@
                                                        void *                      reference)
 {
   ExternalMethodGatedArguments gatedArguments = {selector, arguments, dispatch, target, reference};
   IOReturn result;
   
-  require_action(!isInactive(), exit, result=kIOReturnOffline);
+  __Require_Action(!isInactive(), exit, result=kIOReturnOffline);
   
   result = _commandGate->runAction(OSMemberFunctionCast(IOCommandGate::Action, this, &IOHIDEventServiceUserClient::externalMethodGated), &gatedArguments);
   
 exit:
 
@@ -187,13 +187,13 @@
 //==============================================================================
 IOReturn IOHIDEventServiceUserClient::externalMethodGated(ExternalMethodGatedArguments *arguments)
 {
   IOReturn result;
   
-  require_action(!isInactive(), exit, result=kIOReturnOffline);
+  __Require_Action(!isInactive(), exit, result=kIOReturnOffline);
   
-  require_action(arguments->selector < (uint32_t) kIOHIDEventServiceUserClientNumCommands, exit, result=kIOReturnBadArgument);
+  __Require_Action(arguments->selector < (uint32_t) kIOHIDEventServiceUserClientNumCommands, exit, result=kIOReturnBadArgument);
   
   arguments->dispatch = (IOExternalMethodDispatch *) &sMethods[arguments->selector];
   if (!arguments->target)
     arguments->target = this;
   
@@ -225,11 +225,11 @@
         HIDLogError("%s is not entitled", name);
         goto exit;
     }
     
     result = super::init();
-    require_action(result, exit, HIDLogError("failed"));
+    __Require_Action(result, exit, HIDLogError("failed"));
 
     _owner        = NULL;
     _commandGate  = NULL;
     _state        = 0;
     _queue        = NULL;
@@ -248,14 +248,14 @@
     uint32_t      queueSize = kQueueSizeMax;
     IOWorkLoop *  workLoop;
     boolean_t     result = false;
     OSSerializer * debugStateSerializer;
   
-    require (super::start(provider), exit);
+    __Require (super::start(provider), exit);
   
     _owner = OSDynamicCast(IOHIDEventService, provider);
-    require (_owner, exit);
+    __Require (_owner, exit);
 
     _owner->retain();
   
     object = provider->copyProperty(kIOHIDEventServiceQueueSize);
     num = OSDynamicCast(OSNumber, object);
@@ -265,20 +265,20 @@
     }
     OSSafeReleaseNULL(object);
     
     if ( queueSize ) {
         _queue = IOHIDEventServiceQueue::withCapacity(queueSize, getRegistryEntryID());
-        require(_queue, exit);
+        __Require(_queue, exit);
     }
   
     workLoop = getWorkLoop();
-    require(workLoop, exit);
+    __Require(workLoop, exit);
   
   
     _commandGate = IOCommandGate::commandGate(this);
-    require(_commandGate, exit);
-    require(workLoop->addEventSource(_commandGate) == kIOReturnSuccess, exit);
+    __Require(_commandGate, exit);
+    __Require(workLoop->addEventSource(_commandGate) == kIOReturnSuccess, exit);
   
     debugStateSerializer = OSSerializer::forTarget(this, OSMemberFunctionCast(OSSerializerCallback, this, &IOHIDEventServiceUserClient::serializeDebugState));
     if (debugStateSerializer) {
         setProperty("DebugState", debugStateSerializer);
         debugStateSerializer->release();
@@ -528,11 +528,11 @@
     uint64_t      currentTime, deltaTime;
     uint64_t      nanoTime;
     OSDictionary  *debugDict = OSDictionary::withCapacity(6);
     OSNumber      *num;
     
-    require(debugDict, exit);
+    __Require(debugDict, exit);
     
     currentTime =  mach_continuous_time();
     
     if (_queue) {
         debugDict->setObject("EventQueue", _queue);
Only in B/IOHIDFamily-1035.41.2/IOHIDFamily: IOHIDFamily
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDFamily.xcconfig B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDFamily.xcconfig
--- A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDFamily.xcconfig	2017-03-18 02:14:49.000000000 +0000
+++ B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDFamily.xcconfig	2018-07-02 12:09:45.000000000 +0100
@@ -21,11 +21,11 @@
 
 #include "IOHIDFamily-Version.xcconfig"
 
 ARCHS = i386 x86_64
 VALID_ARCHS = i386 x86_64
-RUN_CLANG_STATIC_ANALYZER = YES
+//RUN_CLANG_STATIC_ANALYZER = YES
 GCC_ENABLE_FIX_AND_CONTINUE = NO
 ZERO_LINK = NO
 GCC_WARN_SHADOW = YES
 //GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS = YES
 GCC_WARN_NON_VIRTUAL_DESTRUCTOR = YES
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDLibUserClient.cpp B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDLibUserClient.cpp
--- A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDLibUserClient.cpp	2017-10-30 18:04:48.000000000 +0000
+++ B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDLibUserClient.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -785,11 +785,11 @@
 bool IOHIDLibUserClient::serializeDebugState(void *ref __unused, OSSerialize *serializer)
 {
     bool          result = false;
     OSDictionary  *debugDict = OSDictionary::withCapacity(1);
     
-    require(debugDict, exit);
+    __Require(debugDict, exit);
     
     if (fQueueMap) {
         debugDict->setObject("EventQueueMap", fQueueMap);
     }
     
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDPrivateKeys.h B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDPrivateKeys.h
--- A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDPrivateKeys.h	2018-02-04 13:57:13.000000000 +0000
+++ B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDPrivateKeys.h	2018-07-02 12:09:45.000000000 +0100
@@ -212,11 +212,31 @@
 
 #define kIOHIDGameControllerTypeKey "GameControllerType"
 
 #define kIOHIDGameControllerFormFittingKey "GameControllerFormFitting"
 
-
-
+#define kIOHIDActivityStateKey                          "ActivityState"
+#define kIOHIDBiometricTapTrackingEnabledKey            "BiometricTapTrackingEnabled"
+#define kIOHIDBiometricDoubleTapTimeoutKey              "BiometricDoubleTapTimeout"
+#define kIOHIDBiometricTripleTapTimeoutKey              "BiometricTripleTapTimeout"
+#define kIOHIDDeclareActivityThreshold                  "DeclareActivityThreshold"
+#define kIOHIDKeyboardEnabledKey                        "KeyboardEnabled"
+#define kIOHIDKeyboardEnabledEventKey                   "KeyboardEnabledEvent"
+#define kIOHIDKeyboardEnabledEventTypeKey               "KeyboardEnabledEventType"
+#define kIOHIDKeyboardEnabledEventUsagePageKey          "KeyboardEnabledEventUsagePage"
+#define kIOHIDKeyboardEnabledEventEventTypeKey          "KeyboardEnabledEventEventType"
+#define kIOHIDKeyboardEnabledEventEventUsagePageKey     "KeyboardEnabledEventEventUsagePage"
+#define kIOHIDKeyboardEnabledEventUsageKey              "KeyboardEnabledEventUsage"
+#define kIOHIDKeyboardEnabledByEventKey                 "KeyboardEnabledByEvent"
+#define kIOHIDKeyboardPressCountTrackingEnabledKey      "KeyboardPressCountTrackingEnabled"
+#define kIOHIDKeyboardPressCountUsagePairsKey           "KeyboardPressCountUsagePairs"
+#define kIOHIDKeyboardPressCountDoublePressTimeoutKey   "KeyboardPressCountDoublePressTimeout"
+#define kIOHIDKeyboardPressCountTriplePressTimeoutKey   "KeyboardPressCountTriplePressTimeout"
+#define kIOHIDKeyboardLongPressTimeoutKey               "KeyboardLongPressTimeout"
+#define kIOHIDRelayServiceInterfaceActiveKey            "RelayServiceInterfaceActiveKey"
+#define kIOHIDRelaySupportKey                           "RelaySupport"
+#define kIOHIDUserPointerAccelCurvesKey                 "UserPointerAccelCurves"
+#define kIOHIDUserScrollAccelCurvesKey                  "UserScrollAccelCurves"
 
 __END_DECLS
 
 #endif /* !_IOKIT_HID_IOHIDPRIVATEKEYS_H_ */
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDProviderPropertyMerger.cpp B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDProviderPropertyMerger.cpp
--- A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDProviderPropertyMerger.cpp	2016-03-21 17:06:36.000000000 +0000
+++ B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDProviderPropertyMerger.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -47,15 +47,15 @@
 {
     const OSSymbol *        dictionaryEntry = NULL;
     OSCollectionIterator *  iterator        = NULL;
     bool                    result          = false;
 
-    require(provider && properties, exit);
+    __Require(provider && properties, exit);
 
     // Iterate through the properties until we run out of entries
     iterator = OSCollectionIterator::withCollection(properties);
-    require(iterator, exit);
+    __Require(iterator, exit);
 
     while ( (dictionaryEntry = (const OSSymbol *)iterator->getNextObject()) ) {
         OSDictionary *	sourceDictionary    = NULL;
         OSObject *      providerObject      = NULL;
         OSDictionary *	providerDictionary  = NULL;
@@ -70,19 +70,19 @@
 
             // Because access to the registry table may not be synchronized, we should take a copy
             OSDictionary *  providerDictionaryCopy = NULL;
 
             providerDictionaryCopy = OSDictionary::withDictionary( providerDictionary, 0);
-            require_action(providerDictionaryCopy, dictionaryExit, result=false);
+            __Require_Action(providerDictionaryCopy, dictionaryExit, result=false);
             
             // Recursively merge the two dictionaries
             result = mergeDictionaries(sourceDictionary, providerDictionaryCopy);
-            require(result, dictionaryExit);
+            __Require(result, dictionaryExit);
             
             // OK, now we can just set the property in our provider
             result = provider->setProperty(dictionaryEntry, providerDictionaryCopy);
-            require(result, dictionaryExit);
+            __Require(result, dictionaryExit);
 
 dictionaryExit:
             if ( providerDictionaryCopy )
                 providerDictionaryCopy->release();
         } else {
@@ -111,15 +111,15 @@
 {
     OSCollectionIterator *  srcIterator = NULL;
     OSSymbol*               keyObject   = NULL;
     bool                    result      = false;
 
-    require(source && target, exit);
+    __Require(source && target, exit);
 
     // Get our source dictionary
     srcIterator = OSCollectionIterator::withCollection(source);
-    require(srcIterator, exit);
+    __Require(srcIterator, exit);
 
     while ((keyObject = OSDynamicCast(OSSymbol, srcIterator->getNextObject()))) {
         OSDictionary *	childSourceDictionary   = NULL;
         OSDictionary *	childTargetDictionary   = NULL;
         OSObject *      childTargetObject       = NULL;
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDResourceUserClient.cpp B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDResourceUserClient.cpp
--- A/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDResourceUserClient.cpp	2017-08-22 05:37:30.000000000 +0100
+++ B/IOHIDFamily-1035.41.2/IOHIDFamily/IOHIDResourceUserClient.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -95,11 +95,11 @@
       HIDLogError("%s is not entitled", name);
       goto exit;
     }
  //   require_noerr_action(clientHasPrivilege(owningTask, kIOClientPrivilegeAdministrator), exit, result=false);
     result = super::initWithTask(owningTask, security_id, type);
-    require_action(result, exit, HIDLogError("failed"));
+    __Require_Action(result, exit, HIDLogError("failed"));
     
     _pending            = OSSet::withCapacity(4);
     _maxClientTimeoutUS = kHIDClientTimeoutUS;
 
 exit:
@@ -113,25 +113,25 @@
 {
     IOWorkLoop *    workLoop;
     bool            result;
     
     _owner = OSDynamicCast(IOHIDResource, provider);
-    require_action(_owner, exit, result=false);
+    __Require_Action(_owner, exit, result=false);
     _owner->retain();
     
-    require_action(super::start(provider), exit, result=false);
+    __Require_Action(super::start(provider), exit, result=false);
     
     workLoop = getWorkLoop();
-    require_action(workLoop, exit, result=false);
+    __Require_Action(workLoop, exit, result=false);
     
     _createDeviceTimer = IOTimerEventSource::timerEventSource(this, OSMemberFunctionCast(IOTimerEventSource::Action, this, &IOHIDResourceDeviceUserClient::createAndStartDeviceAsyncCallback));
-    require_action(_createDeviceTimer, exit, result=false);
-    require_noerr_action(workLoop->addEventSource(_createDeviceTimer), exit, result=false);
+    __Require_Action(_createDeviceTimer, exit, result=false);
+    __Require_noErr_Action(workLoop->addEventSource(_createDeviceTimer), exit, result=false);
     
     _commandGate = IOCommandGate::commandGate(this);
-    require_action(_commandGate, exit, result=false);
-    require_noerr_action(workLoop->addEventSource(_commandGate), exit, result=false);
+    __Require_Action(_commandGate, exit, result=false);
+    __Require_noErr_Action(workLoop->addEventSource(_commandGate), exit, result=false);
     
     result = true;
     
 exit:
     if ( result==false ) {
@@ -147,11 +147,11 @@
 //----------------------------------------------------------------------------------------------------
 void IOHIDResourceDeviceUserClient::stop(IOService * provider)
 {
     IOWorkLoop * workLoop = getWorkLoop();
     
-    require(workLoop, exit);
+    __Require(workLoop, exit);
     
     if ( _createDeviceTimer ) {
         _createDeviceTimer->cancelTimeout();
         workLoop->removeEventSource(_createDeviceTimer);
     }
@@ -202,11 +202,11 @@
 //----------------------------------------------------------------------------------------------------
 IOReturn IOHIDResourceDeviceUserClient::registerNotificationPort(mach_port_t port, UInt32 type __unused, io_user_reference_t refCon __unused)
 {
     IOReturn result;
     
-    require_action(!isInactive(), exit, result=kIOReturnOffline);
+    __Require_Action(!isInactive(), exit, result=kIOReturnOffline);
     
     result = _commandGate->runAction(OSMemberFunctionCast(IOCommandGate::Action, this, &IOHIDResourceDeviceUserClient::registerNotificationPortGated), port);
     
 exit:
     return result;
@@ -217,12 +217,12 @@
 //----------------------------------------------------------------------------------------------------
 IOReturn IOHIDResourceDeviceUserClient::registerNotificationPortGated(mach_port_t port)
 {
     IOReturn result;
     
-    require_action(!isInactive(), exit, result=kIOReturnOffline);
-    require_action(_queue, exit, result=kIOReturnError);
+    __Require_Action(!isInactive(), exit, result=kIOReturnOffline);
+    __Require_Action(_queue, exit, result=kIOReturnError);
 
     _port = port;
     _queue->setNotificationPort(port);
     
     result = kIOReturnSuccess;
@@ -235,11 +235,11 @@
 //----------------------------------------------------------------------------------------------------
 IOReturn IOHIDResourceDeviceUserClient::clientMemoryForType(UInt32 type __unused, IOOptionBits * options, IOMemoryDescriptor ** memory )
 {
     IOReturn result;
     
-    require_action(!isInactive(), exit, result=kIOReturnOffline);
+    __Require_Action(!isInactive(), exit, result=kIOReturnOffline);
 
     result = _commandGate->runAction(OSMemberFunctionCast(IOCommandGate::Action, this, &IOHIDResourceDeviceUserClient::clientMemoryForTypeGated), options, memory);
     
 exit:
     return result;
@@ -251,20 +251,20 @@
 IOReturn IOHIDResourceDeviceUserClient::clientMemoryForTypeGated(IOOptionBits * options, IOMemoryDescriptor ** memory )
 {
     IOReturn ret;
     IOMemoryDescriptor * memoryToShare = NULL;
     
-    require_action(!isInactive(), exit, ret=kIOReturnOffline);
+    __Require_Action(!isInactive(), exit, ret=kIOReturnOffline);
     
     if ( !_queue ) {
         _queue = IOHIDResourceQueue::withCapacity(kHIDQueueSize);
     }
     
-    require_action(_queue, exit, ret = kIOReturnNoMemory);
+    __Require_Action(_queue, exit, ret = kIOReturnNoMemory);
     
     memoryToShare = _queue->getMemoryDescriptor();
-    require_action(memoryToShare, exit, ret = kIOReturnNoMemory);
+    __Require_Action(memoryToShare, exit, ret = kIOReturnNoMemory);
 
     memoryToShare->retain();
 
     ret = kIOReturnSuccess;
 
@@ -286,11 +286,11 @@
                                             void *                      reference)
 {
     ExternalMethodGatedArguments gatedArguments = {selector, arguments, dispatch, target, reference};
     IOReturn result;
     
-    require_action(!isInactive(), exit, result=kIOReturnOffline);
+    __Require_Action(!isInactive(), exit, result=kIOReturnOffline);
     
     result = _commandGate->runAction(OSMemberFunctionCast(IOCommandGate::Action, this, &IOHIDResourceDeviceUserClient::externalMethodGated), &gatedArguments);
     
 exit:
     return result;
@@ -301,13 +301,13 @@
 //----------------------------------------------------------------------------------------------------
 IOReturn IOHIDResourceDeviceUserClient::externalMethodGated(ExternalMethodGatedArguments *arguments)
 {
     IOReturn result;
     
-    require_action(!isInactive(), exit, result=kIOReturnOffline);
+    __Require_Action(!isInactive(), exit, result=kIOReturnOffline);
 
-    require_action(arguments->selector < (uint32_t) kIOHIDResourceDeviceUserClientMethodCount, exit, result=kIOReturnBadArgument);
+    __Require_Action(arguments->selector < (uint32_t) kIOHIDResourceDeviceUserClientMethodCount, exit, result=kIOReturnBadArgument);
 
     arguments->dispatch = (IOExternalMethodDispatch *) &_methods[arguments->selector];
     if (!arguments->target)
         arguments->target = this;
     
@@ -364,23 +364,23 @@
 IOReturn IOHIDResourceDeviceUserClient::createAndStartDevice()
 {
     IOReturn    result;
     OSNumber *  number = NULL;
     
-    require_action(_device==NULL, exit, result=kIOReturnInternalError);
+    __Require_Action(_device==NULL, exit, result=kIOReturnInternalError);
     
     number = OSDynamicCast(OSNumber, _properties->getObject(kIOHIDRequestTimeoutKey));
     if ( number )
         _maxClientTimeoutUS = number->unsigned32BitValue();
 
     // If after all the unwrapping we have a dictionary, let's create the device
     _device = IOHIDUserDevice::withProperties(_properties);
-    require_action(_device, exit, result=kIOReturnNoResources);
+    __Require_Action(_device, exit, result=kIOReturnNoResources);
     
-    require_action(_device->attach(this), exit, result=kIOReturnInternalError);
+    __Require_Action(_device->attach(this), exit, result=kIOReturnInternalError);
     
-    require_action(_device->start(this), exit, _device->detach(this); result=kIOReturnInternalError);
+    __Require_Action(_device->start(this), exit, _device->detach(this); result=kIOReturnInternalError);
     
     result = kIOReturnSuccess;
     
 exit:
     if ( result!=kIOReturnSuccess ) {
@@ -418,45 +418,45 @@
     IOByteCount             propertiesLength    = 0;
     OSObject *              object              = NULL;
     IOReturn                result;
     
     // Report descriptor is static and thus can only be set on creation
-    require_action(_device==NULL, exit, result=kIOReturnInternalError);
+    __Require_Action(_device==NULL, exit, result=kIOReturnInternalError);
     
     // Let's deal with our device properties from data
     propertiesDesc = createMemoryDescriptorFromInputArguments(arguments);
-    require_action(propertiesDesc, exit, result=kIOReturnNoMemory);
+    __Require_Action(propertiesDesc, exit, result=kIOReturnNoMemory);
     
     propertiesLength = propertiesDesc->getLength();
-    require_action(propertiesLength, exit, result=kIOReturnNoResources);
+    __Require_Action(propertiesLength, exit, result=kIOReturnNoResources);
     
     propertiesData = IOMalloc(propertiesLength);
-    require_action(propertiesData, exit, result=kIOReturnNoMemory);
+    __Require_Action(propertiesData, exit, result=kIOReturnNoMemory);
     
     result = propertiesDesc->prepare();
-    require_noerr(result, exit);
+    __Require_noErr(result, exit);
     propertiesDesc->readBytes(0, propertiesData, propertiesLength);
     propertiesDesc->complete();
     
-    require_action(strnlen((const char *) propertiesData, propertiesLength) < propertiesLength, exit, result=kIOReturnInternalError);
+    __Require_Action(strnlen((const char *) propertiesData, propertiesLength) < propertiesLength, exit, result=kIOReturnInternalError);
 
     object = OSUnserializeXML((const char *)propertiesData, propertiesLength);
-    require_action(object, exit, result=kIOReturnInternalError);
+    __Require_Action(object, exit, result=kIOReturnInternalError);
     
     OSSafeReleaseNULL(_properties);
     
     _properties = OSDynamicCast(OSDictionary, object);
-    require_action(_properties, exit, result=kIOReturnNoMemory);
+    __Require_Action(_properties, exit, result=kIOReturnNoMemory);
     
     _properties->retain();
     
     if ( arguments->scalarInput[0] )
         result = createAndStartDeviceAsync();
     else
         result = createAndStartDevice();
     
-    require_noerr(result, exit);
+    __Require_noErr(result, exit);
 
 exit:
     
     if ( object )
         object->release();
@@ -583,11 +583,11 @@
 IOReturn IOHIDResourceDeviceUserClient::getReport(IOMemoryDescriptor *report, IOHIDReportType reportType, IOOptionBits options)
 {
     ReportGatedArguments    arguments   = {report, reportType, options};
     IOReturn                result;
     
-    require_action(!isInactive(), exit, result=kIOReturnOffline);
+    __Require_Action(!isInactive(), exit, result=kIOReturnOffline);
 
     result = _commandGate->runAction(OSMemberFunctionCast(IOCommandGate::Action, this, &IOHIDResourceDeviceUserClient::getReportGated), &arguments);
 exit:
     return result;
 }
@@ -601,27 +601,27 @@
     __ReportResult                  result;
     AbsoluteTime                    ts;
     IOReturn                        ret;
     OSData *                        retData = NULL;
     
-    require_action(!isInactive(), exit, ret=kIOReturnOffline);
+    __Require_Action(!isInactive(), exit, ret=kIOReturnOffline);
     
     result.descriptor = arguments->report;
     result.token      = _tokenIndex++;
     
     retData = OSData::withBytesNoCopy(&result, sizeof(__ReportResult));
-    require_action(retData, exit, ret=kIOReturnNoMemory);
+    __Require_Action(retData, exit, ret=kIOReturnNoMemory);
     
     header.direction   = kIOHIDResourceReportDirectionIn;
     header.type        = arguments->reportType;
     header.reportID    = arguments->options&0xff;
     header.length      = (uint32_t)arguments->report->getLength();
     header.token       = result.token;
 
     _pending->setObject(retData);
     
-    require_action(_queue && _queue->enqueueReport(&header), exit, ret=kIOReturnNoMemory);
+    __Require_Action(_queue && _queue->enqueueReport(&header), exit, ret=kIOReturnNoMemory);
     
     // if we successfully enqueue, let's sleep till we get a result from postReportResult
     clock_interval_to_deadline(kMicrosecondScale, _maxClientTimeoutUS, &ts);
     
     switch ( _commandGate->commandSleep(retData, ts, THREAD_ABORTSAFE) ) {
@@ -652,11 +652,11 @@
 IOReturn IOHIDResourceDeviceUserClient::setReport(IOMemoryDescriptor *report, IOHIDReportType reportType, IOOptionBits options)
 {
     ReportGatedArguments    arguments={report, reportType, options};
     IOReturn                result;
     
-    require_action(!isInactive(), exit, result=kIOReturnOffline);
+    __Require_Action(!isInactive(), exit, result=kIOReturnOffline);
     
     result = _commandGate->runAction(OSMemberFunctionCast(IOCommandGate::Action, this, &IOHIDResourceDeviceUserClient::setReportGated), &arguments);
 exit:
     return result;
 }
@@ -670,28 +670,28 @@
     __ReportResult                  result;
     AbsoluteTime                    ts;
     IOReturn                        ret;
     OSData *                        retData = NULL;
     
-    require_action(!isInactive(), exit, ret=kIOReturnOffline);
+    __Require_Action(!isInactive(), exit, ret=kIOReturnOffline);
 
     bzero(&result, sizeof(result));
     
     result.token       = _tokenIndex++;
     
     retData = OSData::withBytesNoCopy(&result, sizeof(result));
-    require_action(retData, exit, ret=kIOReturnNoMemory);
+    __Require_Action(retData, exit, ret=kIOReturnNoMemory);
     
     header.direction   = kIOHIDResourceReportDirectionOut;
     header.type        = arguments->reportType;
     header.reportID    = arguments->options&0xff;
     header.length      = (uint32_t)arguments->report->getLength();
     header.token       = result.token;
 
     _pending->setObject(retData);
     
-    require_action(_queue && _queue->enqueueReport(&header, arguments->report), exit, ret=kIOReturnNoMemory);
+    __Require_Action(_queue && _queue->enqueueReport(&header, arguments->report), exit, ret=kIOReturnNoMemory);
 
     // if we successfully enqueue, let's sleep till we get a result from postReportResult
     clock_interval_to_deadline(kMicrosecondScale, _maxClientTimeoutUS, (uint64_t *)&ts);
     
     switch ( _commandGate->commandSleep(retData, ts, THREAD_ABORTSAFE) ) {
@@ -725,11 +725,11 @@
     IOReturn result = kIOReturnNotFound;
     
     u_int64_t token = (u_int64_t)arguments->scalarInput[kIOHIDResourceUserClientResponseIndexToken];
 
     OSCollectionIterator * iterator = OSCollectionIterator::withCollection(_pending);
-    require_action(iterator, exit, result = kIOReturnNoMemory);
+    __Require_Action(iterator, exit, result = kIOReturnNoMemory);
     
     while ( (object = iterator->getNextObject()) ) {
         __ReportResult * pResult = (__ReportResult*)((OSData*)object)->getBytesNoCopy();
         
         if (pResult->token != token)
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDFamily.xcodeproj/project.pbxproj B/IOHIDFamily-1035.41.2/IOHIDFamily.xcodeproj/project.pbxproj
--- A/IOHIDFamily-1035.41.2/IOHIDFamily.xcodeproj/project.pbxproj	2017-09-05 16:41:49.000000000 +0100
+++ B/IOHIDFamily-1035.41.2/IOHIDFamily.xcodeproj/project.pbxproj	2018-07-02 12:09:45.000000000 +0100
@@ -23,11 +23,10 @@
 			buildConfigurationList = 84735D50103B050000F542C5 /* Build configuration list for PBXAggregateTarget "Tools" */;
 			buildPhases = (
 				D863EE381DDE19AD00B06757 /* CopyFiles */,
 			);
 			dependencies = (
-				481F1D8D1C91F1A000617A6F /* PBXTargetDependency */,
 				D8DBD6701BDA929A00E16D93 /* PBXTargetDependency */,
 				84061D721606BF89003855D6 /* PBXTargetDependency */,
 				84735D4F103B04E200F542C5 /* PBXTargetDependency */,
 				84735D4D103B04DF00F542C5 /* PBXTargetDependency */,
 			);
@@ -568,10 +567,14 @@
 		98AC786C1AB35A3B00F61533 /* IOKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 98AC786B1AB35A3B00F61533 /* IOKit.framework */; };
 		98B36DEE196CA2FC00435CC7 /* IOHIDEventSource.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 98B36DED196CA2FC00435CC7 /* IOHIDEventSource.cpp */; };
 		98B36DEF196CA2FC00435CC7 /* IOHIDEventSource.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 98B36DED196CA2FC00435CC7 /* IOHIDEventSource.cpp */; };
 		98B9F0541AB00DBB003B3C24 /* Foundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 98B9F0531AB00DBB003B3C24 /* Foundation.framework */; };
 		98B9F0611AB00E6C003B3C24 /* IOHIDKeyboardFilter.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 98B9F05C1AB00DFA003B3C24 /* IOHIDKeyboardFilter.cpp */; };
+		AA71344F2094BDB100939826 /* IOKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 014C794B00027ECC11CA2CF6 /* IOKit.framework */; };
+		AA7134502094BDCC00939826 /* CoreFoundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = B963F4B700BC660708CA29FD /* CoreFoundation.framework */; };
+		AAD019AF209543A400645B1B /* IOKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 014C794B00027ECC11CA2CF6 /* IOKit.framework */; };
+		AAD019B0209543A800645B1B /* CoreFoundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = B963F4B700BC660708CA29FD /* CoreFoundation.framework */; };
 		B9004A8612E9149900669C25 /* IOHIDSystemCursorHelper.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B9004A8412E9149900669C25 /* IOHIDSystemCursorHelper.cpp */; };
 		B9004A8712E9149900669C25 /* IOHIDSystemCursorHelper.h in Headers */ = {isa = PBXBuildFile; fileRef = B9004A8512E9149900669C25 /* IOHIDSystemCursorHelper.h */; };
 		B939FE62131B81BD00FA1175 /* IOHIDResourceUserClient.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 84B95A7C0E872A7A00F19A68 /* IOHIDResourceUserClient.cpp */; };
 		B939FE64131B81C100FA1175 /* IOHIDResourceUserClient.h in Headers */ = {isa = PBXBuildFile; fileRef = 84B95A7D0E872A7A00F19A68 /* IOHIDResourceUserClient.h */; };
 		B939FE65131B81CA00FA1175 /* IOHIDResource.h in Headers */ = {isa = PBXBuildFile; fileRef = 84302F3E0E8490BD0045CFDF /* IOHIDResource.h */; };
@@ -590,12 +593,10 @@
 		B9D278951162BD2500549F99 /* IOFixed64.h in Headers */ = {isa = PBXBuildFile; fileRef = B9D278931162BD2500549F99 /* IOFixed64.h */; };
 		B9F64FD516B1B4200056CAB0 /* IOHIDEventSystemQueue.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B9F64FD316B1B4200056CAB0 /* IOHIDEventSystemQueue.cpp */; };
 		B9F64FD616B1B4200056CAB0 /* IOHIDEventSystemQueue.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B9F64FD316B1B4200056CAB0 /* IOHIDEventSystemQueue.cpp */; };
 		B9F64FD716B1B4200056CAB0 /* IOHIDEventSystemQueue.h in Headers */ = {isa = PBXBuildFile; fileRef = B9F64FD416B1B4200056CAB0 /* IOHIDEventSystemQueue.h */; };
 		B9F64FD816B1B4200056CAB0 /* IOHIDEventSystemQueue.h in Headers */ = {isa = PBXBuildFile; fileRef = B9F64FD416B1B4200056CAB0 /* IOHIDEventSystemQueue.h */; };
-		D80385551C1609D400F06514 /* IOKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 98AC786B1AB35A3B00F61533 /* IOKit.framework */; };
-		D80385561C1609D400F06514 /* Foundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 98B9F0531AB00DBB003B3C24 /* Foundation.framework */; };
 		D80385651C160A2A00F06514 /* IOHIDNXEventTranslatorSessionFilter.cpp in Sources */ = {isa = PBXBuildFile; fileRef = D80385621C160A2A00F06514 /* IOHIDNXEventTranslatorSessionFilter.cpp */; };
 		D804B1C11C124D2D00BFDD98 /* IOHIDEventTranslation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = D80DEA4A1C11F2170044375A /* IOHIDEventTranslation.framework */; };
 		D804B1C21C124D3600BFDD98 /* CoreFoundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = D868E2D71BD5DAA800CC07F9 /* CoreFoundation.framework */; };
 		D804B1C31C124D3E00BFDD98 /* IOKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = D868E2D91BD5DAAF00CC07F9 /* IOKit.framework */; };
 		D805C2361C1B57A600B23EFC /* IOHIDEventTranslation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = D80DEA4A1C11F2170044375A /* IOHIDEventTranslation.framework */; };
@@ -644,12 +645,10 @@
 		D868E2CD1BD5D9C600CC07F9 /* IOHIDNXEventRouter.plugin in CopyFiles */ = {isa = PBXBuildFile; fileRef = D868E2C61BD5D92100CC07F9 /* IOHIDNXEventRouter.plugin */; settings = {ATTRIBUTES = (CodeSignOnCopy, RemoveHeadersOnCopy, ); }; };
 		D868E2CE1BD5D9DB00CC07F9 /* IOHIDIUnknown.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 014D1774FFE1C65511CA2CF6 /* IOHIDIUnknown.cpp */; };
 		D868E2D41BD5DA5800CC07F9 /* IOHIDNXEventRouter.cpp in Sources */ = {isa = PBXBuildFile; fileRef = D868E2D11BD5DA2A00CC07F9 /* IOHIDNXEventRouter.cpp */; };
 		D868E2D51BD5DA6C00CC07F9 /* IOHIDNXEventRouter.h in Headers */ = {isa = PBXBuildFile; fileRef = D868E2D21BD5DA2A00CC07F9 /* IOHIDNXEventRouter.h */; };
 		D868E2D61BD5DA7A00CC07F9 /* IOHIDIUnknown.h in Headers */ = {isa = PBXBuildFile; fileRef = 014D1775FFE1C65511CA2CF6 /* IOHIDIUnknown.h */; };
-		D868E2D81BD5DAA800CC07F9 /* CoreFoundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = D868E2D71BD5DAA800CC07F9 /* CoreFoundation.framework */; };
-		D868E2DA1BD5DAAF00CC07F9 /* IOKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = D868E2D91BD5DAAF00CC07F9 /* IOKit.framework */; };
 		D868E2DD1BD5DB7000CC07F9 /* IOHIDNXEventDescription.c in Sources */ = {isa = PBXBuildFile; fileRef = D868E2DB1BD5DB5F00CC07F9 /* IOHIDNXEventDescription.c */; };
 		D868E2DE1BD5DC7500CC07F9 /* IOHIDEventServiceClass.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 842785760C3B48900053CB98 /* IOHIDEventServiceClass.cpp */; };
 		D868E2DF1BD5DC8C00CC07F9 /* IOHIDEventServiceClass.h in Headers */ = {isa = PBXBuildFile; fileRef = 842785770C3B48900053CB98 /* IOHIDEventServiceClass.h */; };
 		D868E2E11BD5DCB100CC07F9 /* IOHIDLibFactory.cpp in Sources */ = {isa = PBXBuildFile; fileRef = D868E2E01BD5DCB100CC07F9 /* IOHIDLibFactory.cpp */; };
 		D868E2E31BD70D4600CC07F9 /* IOHIDWorkLoop.h in Copy Kernel HIDSystem */ = {isa = PBXBuildFile; fileRef = B9768E89128A72D800155C03 /* IOHIDWorkLoop.h */; };
@@ -733,17 +732,10 @@
 		F5CD19B61BEACDFF00D0888A /* CoreFoundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = D868E2D71BD5DAA800CC07F9 /* CoreFoundation.framework */; };
 		F5CD19BE1BEACE4C00D0888A /* IOHIDKeyboardFilter.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 98B9F05C1AB00DFA003B3C24 /* IOHIDKeyboardFilter.cpp */; };
 /* End PBXBuildFile section */
 
 /* Begin PBXContainerItemProxy section */
-		481F1D8C1C91F1A000617A6F /* PBXContainerItemProxy */ = {
-			isa = PBXContainerItemProxy;
-			containerPortal = 089C1669FE841209C02AAC07 /* Project object */;
-			proxyType = 1;
-			remoteGlobalIDString = 481F1D7F1C91F10400617A6F;
-			remoteInfo = hidutil;
-		};
 		48488BFE1EE7751D0091E720 /* PBXContainerItemProxy */ = {
 			isa = PBXContainerItemProxy;
 			containerPortal = 089C1669FE841209C02AAC07 /* Project object */;
 			proxyType = 1;
 			remoteGlobalIDString = 84A5E5040C3319B5007BF6A8;
@@ -2135,12 +2127,12 @@
 		D80385541C1609D400F06514 /* Frameworks */ = {
 			isa = PBXFrameworksBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
 				D805C2361C1B57A600B23EFC /* IOHIDEventTranslation.framework in Frameworks */,
-				D80385551C1609D400F06514 /* IOKit.framework in Frameworks */,
-				D80385561C1609D400F06514 /* Foundation.framework in Frameworks */,
+				AAD019AF209543A400645B1B /* IOKit.framework in Frameworks */,
+				AAD019B0209543A800645B1B /* CoreFoundation.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
 		D80DEA311C11400A0044375A /* Frameworks */ = {
 			isa = PBXFrameworksBuildPhase;
@@ -2163,12 +2155,12 @@
 		};
 		D868E2BD1BD5D92100CC07F9 /* Frameworks */ = {
 			isa = PBXFrameworksBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
-				D868E2DA1BD5DAAF00CC07F9 /* IOKit.framework in Frameworks */,
-				D868E2D81BD5DAA800CC07F9 /* CoreFoundation.framework in Frameworks */,
+				AA71344F2094BDB100939826 /* IOKit.framework in Frameworks */,
+				AA7134502094BDCC00939826 /* CoreFoundation.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
 		D8ACE9141DBA6D3C00F34E42 /* Frameworks */ = {
 			isa = PBXFrameworksBuildPhase;
@@ -4836,15 +4828,10 @@
 			runOnlyForDeploymentPostprocessing = 0;
 		};
 /* End PBXSourcesBuildPhase section */
 
 /* Begin PBXTargetDependency section */
-		481F1D8D1C91F1A000617A6F /* PBXTargetDependency */ = {
-			isa = PBXTargetDependency;
-			target = 481F1D7F1C91F10400617A6F /* hidutil */;
-			targetProxy = 481F1D8C1C91F1A000617A6F /* PBXContainerItemProxy */;
-		};
 		48488BFF1EE7751D0091E720 /* PBXTargetDependency */ = {
 			isa = PBXTargetDependency;
 			target = 84A5E5040C3319B5007BF6A8 /* hidd */;
 			targetProxy = 48488BFE1EE7751D0091E720 /* PBXContainerItemProxy */;
 		};
@@ -5125,11 +5112,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -5150,11 +5136,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -5174,11 +5159,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -5199,11 +5183,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -5223,11 +5206,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -5242,11 +5224,10 @@
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -5266,11 +5247,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -5285,11 +5265,10 @@
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -5351,11 +5330,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -5381,11 +5359,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -5409,11 +5386,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -5439,11 +5415,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -5467,11 +5442,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -5491,11 +5465,10 @@
 					"$(inherited)",
 					"$(SDKROOT)$(SYSTEM_LIBRARY_DIR)/PrivateFrameworks",
 				);
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -5518,11 +5491,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -5542,11 +5514,10 @@
 					"$(inherited)",
 					"$(SDKROOT)$(SYSTEM_LIBRARY_DIR)/PrivateFrameworks",
 				);
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -5582,11 +5553,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				ONLY_ACTIVE_ARCH = YES;
@@ -5617,11 +5587,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				ONLY_ACTIVE_ARCH = YES;
@@ -5645,11 +5614,10 @@
 				CODE_SIGN_ENTITLEMENTS = "tools/IOHIDEventSystemMonitor-Entitlements.plist";
 				CODE_SIGN_IDENTITY = "-";
 				COPY_PHASE_STRIP = NO;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_ENABLE_OBJC_EXCEPTIONS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				OTHER_LDFLAGS = "$(inherited)";
@@ -5672,11 +5640,10 @@
 				CODE_SIGN_ENTITLEMENTS = "tools/IOHIDEventSystemMonitor-Entitlements.plist";
 				CODE_SIGN_IDENTITY = "-";
 				COPY_PHASE_STRIP = NO;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_ENABLE_OBJC_EXCEPTIONS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				OTHER_LDFLAGS = "$(inherited)";
@@ -5692,11 +5659,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
 				CLANG_WARN_ENUM_CONVERSION = YES;
@@ -5711,11 +5677,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				INFOPLIST_FILE = "IOHIDEventSystemPlugIns/IOHIDEventSystemStatistics-Info.plist";
@@ -5734,11 +5699,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
 				CLANG_WARN_ENUM_CONVERSION = YES;
@@ -5753,11 +5717,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				INFOPLIST_FILE = "IOHIDEventSystemPlugIns/IOHIDEventSystemStatistics-Info.plist";
@@ -5776,11 +5739,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
 				CLANG_WARN_ENUM_CONVERSION = YES;
@@ -5789,11 +5751,10 @@
 				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
 				COPY_PHASE_STRIP = NO;
 				ENABLE_NS_ASSERTIONS = NO;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_PRECOMPILE_PREFIX_HEADER = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				INFOPLIST_FILE = "IOHIDEventSystemPlugIns/IOHIDEventSystemStatistics-Info.plist";
@@ -5813,11 +5774,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
 				CLANG_WARN_ENUM_CONVERSION = YES;
@@ -5826,11 +5786,10 @@
 				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
 				COPY_PHASE_STRIP = NO;
 				ENABLE_NS_ASSERTIONS = NO;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_PRECOMPILE_PREFIX_HEADER = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				INFOPLIST_FILE = "IOHIDEventSystemPlugIns/IOHIDEventSystemStatistics-Info.plist";
@@ -5853,11 +5812,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriver.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriver;
 				MODULE_VERSION = 1.5.2;
@@ -5886,11 +5844,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriver.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriver;
 				MODULE_VERSION = 1.5.2;
@@ -5916,11 +5873,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriver.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriver;
 				MODULE_VERSION = 1.5.2;
@@ -5946,11 +5902,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriver.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriver;
 				MODULE_VERSION = 1.5.2;
@@ -5979,11 +5934,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriverSafeBoot.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriverSafeBoot;
 				MODULE_VERSION = 1.5.2;
@@ -6012,11 +5966,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriverSafeBoot.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriverSafeBoot;
 				MODULE_VERSION = 1.5.2;
@@ -6042,11 +5995,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriverSafeBoot.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriverSafeBoot;
 				MODULE_VERSION = 1.5.2;
@@ -6072,11 +6024,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriverSafeBoot.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriverSafeBoot;
 				MODULE_VERSION = 1.5.2;
@@ -6106,11 +6057,10 @@
 				CODE_SIGN_IDENTITY = "-";
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_MODEL_TUNING = G5;
 				GCC_OPTIMIZATION_LEVEL = 0;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = "$(inherited)";
 				PRODUCT_NAME = hidUserDeviceTest;
 				SDKROOT = macosx.internal;
 			};
@@ -6122,11 +6072,10 @@
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CODE_SIGN_ENTITLEMENTS = "tools/IOHIDUserDeviceTest-Entitlements.plist";
 				CODE_SIGN_IDENTITY = "-";
 				GCC_MODEL_TUNING = G5;
 				GCC_OPTIMIZATION_LEVEL = 0;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = "$(inherited)";
 				PRODUCT_NAME = hidUserDeviceTest;
 				SDKROOT = macosx.internal;
 			};
@@ -6138,11 +6087,10 @@
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CODE_SIGN_ENTITLEMENTS = "tools/IOHIDUserDeviceTest-Entitlements.plist";
 				CODE_SIGN_IDENTITY = "-";
 				COPY_PHASE_STRIP = YES;
 				GCC_MODEL_TUNING = G5;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = "$(inherited)";
 				PRODUCT_NAME = hidUserDeviceTest;
 				SDKROOT = macosx.internal;
 				ZERO_LINK = NO;
@@ -6154,11 +6102,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CODE_SIGN_ENTITLEMENTS = "tools/IOHIDUserDeviceTest-Entitlements.plist";
 				CODE_SIGN_IDENTITY = "-";
 				GCC_MODEL_TUNING = G5;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = "$(inherited)";
 				PRODUCT_NAME = hidUserDeviceTest;
 				SDKROOT = macosx.internal;
 			};
@@ -6171,11 +6118,10 @@
 				CODE_SIGN_IDENTITY = "-";
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_MODEL_TUNING = G5;
 				GCC_OPTIMIZATION_LEVEL = 0;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = "$(inherited)";
 				PRODUCT_NAME = hidReportTest;
 			};
 			name = Development;
@@ -6186,11 +6132,10 @@
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CODE_SIGN_ENTITLEMENTS = "tools/IOHIDReportTest-Entitlements.plist";
 				CODE_SIGN_IDENTITY = "-";
 				GCC_MODEL_TUNING = G5;
 				GCC_OPTIMIZATION_LEVEL = 0;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = "$(inherited)";
 				PRODUCT_NAME = hidReportTest;
 			};
 			name = "Development-Embedded";
@@ -6200,11 +6145,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CODE_SIGN_IDENTITY = "-";
 				COPY_PHASE_STRIP = YES;
 				GCC_MODEL_TUNING = G5;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = "$(inherited)";
 				PRODUCT_NAME = hidReportTest;
 				ZERO_LINK = NO;
 			};
@@ -6215,11 +6159,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CODE_SIGN_ENTITLEMENTS = "tools/IOHIDReportTest-Entitlements.plist";
 				CODE_SIGN_IDENTITY = "-";
 				GCC_MODEL_TUNING = G5;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = "$(inherited)";
 				PRODUCT_NAME = hidReportTest;
 			};
 			name = "Deployment-Embedded";
@@ -6271,13 +6214,14 @@
 				FRAMEWORK_SEARCH_PATHS = "";
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
+				GCC_WARN_INHIBIT_ALL_WARNINGS = YES;
 				HEADER_SEARCH_PATHS = "$(SDKROOT)/usr/local/include";
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDFamily.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDFamily;
 				OTHER_CFLAGS = "$(inherited)";
@@ -6303,13 +6247,14 @@
 				ARCHS = "$(ARCHS_STANDARD)";
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				FRAMEWORK_SEARCH_PATHS = "";
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
+				GCC_WARN_INHIBIT_ALL_WARNINGS = YES;
 				HEADER_SEARCH_PATHS = "$(SDKROOT)/usr/local/include";
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDFamily.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDFamily;
 				OTHER_CFLAGS = "$(inherited)";
@@ -6335,12 +6280,12 @@
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriver.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriver;
 				OTHER_CFLAGS = "$(inherited)";
 				OTHER_LDFLAGS = "$(inherited)";
@@ -6363,12 +6308,12 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriver.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriver;
 				OTHER_CFLAGS = "$(inherited)";
 				OTHER_LDFLAGS = "$(inherited)";
@@ -6394,12 +6339,12 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriverSafeBoot.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriverSafeBoot;
 				OTHER_CFLAGS = "$(inherited)";
 				OTHER_LDFLAGS = "$(inherited)";
@@ -6422,12 +6367,12 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriverSafeBoot.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriverSafeBoot;
 				OTHER_CFLAGS = "$(inherited)";
 				OTHER_LDFLAGS = "$(inherited)";
@@ -6454,13 +6399,13 @@
 				FRAMEWORK_SEARCH_PATHS = "";
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "";
 				INFOPLIST_FILE = "IOHIDSystem/Info-IOHIDSystem.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDSystem;
 				OTHER_CFLAGS = "$(inherited)";
@@ -6485,13 +6430,13 @@
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				FRAMEWORK_SEARCH_PATHS = "";
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "";
 				INFOPLIST_FILE = "IOHIDSystem/Info-IOHIDSystem.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDSystem;
 				OTHER_CFLAGS = "$(inherited)";
@@ -6518,11 +6463,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "\"$(SRCROOT)/IOHIDFamily\"";
 				INFOPLIST_FILE = "IOHIDLib/Info-IOHIDLib.plist";
 				INSTALL_PATH = /System/Library/Extensions/IOHIDFamily.kext/Contents/PlugIns/;
 				OTHER_CFLAGS = (
 					"-W",
@@ -6553,11 +6497,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "\"$(SRCROOT)/IOHIDFamily\"";
 				INFOPLIST_FILE = "IOHIDLib/Info-IOHIDLib.plist";
 				INSTALL_PATH = /System/Library/Extensions/IOHIDFamily.kext/Contents/PlugIns/;
 				OTHER_CFLAGS = (
 					"-W",
@@ -6592,11 +6535,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDTestDriver.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDTestDriver;
 				OTHER_CFLAGS = "$(inherited)";
@@ -6619,11 +6561,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDTestDriver.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDTestDriver;
 				OTHER_CFLAGS = "$(inherited)";
@@ -6649,11 +6590,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDUserClient.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDUserClient;
 				OTHER_CFLAGS = "$(inherited)";
@@ -6677,11 +6617,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDUserClient.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDUserClient;
 				OTHER_CFLAGS = "$(inherited)";
@@ -6706,11 +6645,10 @@
 			buildSettings = {
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
-				GCC_TREAT_WARNINGS_AS_ERRORS = NO;
 				INSTALLHDRS_COPY_PHASE = YES;
 				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Frameworks/Kernel.framework/Versions/A/Headers/IOKit/hid";
 				OTHER_CFLAGS = "";
 				OTHER_LDFLAGS = "";
 				OTHER_REZFLAGS = "";
@@ -6728,11 +6666,10 @@
 		};
 		848E57360CC55C7800D5BE22 /* Deployment */ = {
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COPY_PHASE_STRIP = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = NO;
 				INSTALLHDRS_COPY_PHASE = YES;
 				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Frameworks/Kernel.framework/Versions/A/Headers/IOKit/hid";
 				OTHER_CFLAGS = "";
 				OTHER_LDFLAGS = "";
 				OTHER_REZFLAGS = "";
@@ -6764,16 +6701,19 @@
 				CLANG_WARN_UNREACHABLE_CODE = YES;
 				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				ENABLE_TESTABILITY = YES;
 				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_PREPROCESSOR_DEFINITIONS = __BUILDING_PUREDARWIN__;
+				GCC_TREAT_WARNINGS_AS_ERRORS = NO;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				ONLY_ACTIVE_ARCH = YES;
 				OTHER_CFLAGS = "$(inherited)";
 				OTHER_CPLUSPLUSFLAGS = "$(inherited)";
+				SDKROOT = macosx.internal;
 				VALID_ARCHS = "i386 x86_64 arm64 arm64_32 armv4t armv5 armv6 armv6m armv7 armv7em armv7f armv7k armv7m armv7s x86_64h";
 			};
 			name = "Development-Embedded";
 		};
 		848E57C20CC56CFE00D5BE22 /* Deployment-Embedded */ = {
@@ -6791,15 +6731,18 @@
 				CLANG_WARN_SUSPICIOUS_MOVE = YES;
 				CLANG_WARN_UNREACHABLE_CODE = YES;
 				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_PREPROCESSOR_DEFINITIONS = __BUILDING_PUREDARWIN__;
+				GCC_TREAT_WARNINGS_AS_ERRORS = NO;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				OTHER_CFLAGS = "$(inherited)";
 				OTHER_CPLUSPLUSFLAGS = "$(inherited)";
+				SDKROOT = macosx.internal;
 				VALID_ARCHS = "i386 x86_64 arm64 arm64_32 armv4t armv5 armv6 armv6m armv7 armv7em armv7f armv7k armv7m armv7s x86_64h";
 			};
 			name = "Deployment-Embedded";
 		};
 		848E57C30CC56CFE00D5BE22 /* Development-Embedded */ = {
@@ -6811,13 +6754,14 @@
 				FRAMEWORK_SEARCH_PATHS = "";
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
+				GCC_WARN_INHIBIT_ALL_WARNINGS = YES;
 				HEADER_SEARCH_PATHS = "$(SDKROOT)/usr/local/include";
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDFamily-Embedded.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDFamily;
 				MODULE_VERSION = 1.5.2;
@@ -6844,13 +6788,14 @@
 				ARCHS = "$(ARCHS_STANDARD)";
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				FRAMEWORK_SEARCH_PATHS = "";
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
+				GCC_WARN_INHIBIT_ALL_WARNINGS = YES;
 				HEADER_SEARCH_PATHS = "$(SDKROOT)/usr/local/include";
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDFamily.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDFamily;
 				MODULE_VERSION = 1.5.2;
@@ -6879,12 +6824,12 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriver.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriver;
 				MODULE_VERSION = 1.5.2;
 				OTHER_CFLAGS = "$(inherited)";
@@ -6908,12 +6853,12 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriver.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriver;
 				MODULE_VERSION = 1.5.2;
 				OTHER_CFLAGS = "$(inherited)";
@@ -6940,12 +6885,12 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriverSafeBoot.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriverSafeBoot;
 				MODULE_VERSION = 1.5.2;
 				OTHER_CFLAGS = "$(inherited)";
@@ -6969,12 +6914,12 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriverSafeBoot.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriverSafeBoot;
 				MODULE_VERSION = 1.5.2;
 				OTHER_CFLAGS = "$(inherited)";
@@ -7002,13 +6947,13 @@
 				FRAMEWORK_SEARCH_PATHS = "";
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "";
 				INFOPLIST_FILE = "IOHIDSystem/Info-IOHIDSystem.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDSystem;
 				MODULE_VERSION = 1.5.2;
@@ -7034,13 +6979,13 @@
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				FRAMEWORK_SEARCH_PATHS = "";
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "";
 				INFOPLIST_FILE = "IOHIDSystem/Info-IOHIDSystem.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDSystem;
 				MODULE_VERSION = 1.5.2;
@@ -7068,11 +7013,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "\"$(SRCROOT)/IOHIDFamily\"";
 				INFOPLIST_FILE = "IOHIDLib/Info-IOHIDLib.plist";
 				INSTALL_PATH = /System/Library/Extensions/IOHIDFamily.kext/Contents/PlugIns/;
 				OTHER_CFLAGS = (
 					"-W",
@@ -7103,11 +7047,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "\"$(SRCROOT)/IOHIDFamily\"";
 				INFOPLIST_FILE = "IOHIDLib/Info-IOHIDLib.plist";
 				INSTALL_PATH = /System/Library/Extensions/IOHIDFamily.kext/Contents/PlugIns/;
 				OTHER_CFLAGS = (
 					"-W",
@@ -7142,11 +7085,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDTestDriver.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDTestDriver;
 				MODULE_VERSION = 1.0;
@@ -7171,11 +7113,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDTestDriver.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDTestDriver;
 				MODULE_VERSION = 1.0;
@@ -7203,11 +7144,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDUserClient.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDUserClient;
 				MODULE_VERSION = 1.5.2;
@@ -7232,11 +7172,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDUserClient.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDUserClient;
 				MODULE_VERSION = 1.5.2;
@@ -7262,11 +7201,10 @@
 			buildSettings = {
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
-				GCC_TREAT_WARNINGS_AS_ERRORS = NO;
 				INSTALLHDRS_COPY_PHASE = YES;
 				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Frameworks/Kernel.framework/Versions/A/Headers/IOKit/hid";
 				OTHER_CFLAGS = "";
 				OTHER_LDFLAGS = "";
 				OTHER_REZFLAGS = "";
@@ -7284,11 +7222,10 @@
 		};
 		848E57D20CC56CFE00D5BE22 /* Deployment-Embedded */ = {
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COPY_PHASE_STRIP = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = NO;
 				INSTALLHDRS_COPY_PHASE = YES;
 				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Frameworks/Kernel.framework/Versions/A/Headers/IOKit/hid";
 				OTHER_CFLAGS = "";
 				OTHER_LDFLAGS = "";
 				OTHER_REZFLAGS = "";
@@ -7311,11 +7248,10 @@
 				CODE_SIGN_IDENTITY = "-";
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_MODEL_TUNING = G5;
 				GCC_OPTIMIZATION_LEVEL = 0;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/libexec;
 				OTHER_LDFLAGS = (
 					"$(inherited)",
 					"-sectcreate",
 					__CGPreLoginApp,
@@ -7334,11 +7270,10 @@
 				CODE_SIGN_ENTITLEMENTS = "hidd/hidd-Entitlements.plist";
 				CODE_SIGN_IDENTITY = "-";
 				COPY_PHASE_STRIP = YES;
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				GCC_MODEL_TUNING = G5;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/libexec;
 				OTHER_LDFLAGS = (
 					"$(inherited)",
 					"-sectcreate",
 					__CGPreLoginApp,
@@ -7358,11 +7293,10 @@
 				CODE_SIGN_IDENTITY = "-";
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_MODEL_TUNING = G5;
 				GCC_OPTIMIZATION_LEVEL = 0;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/libexec;
 				OTHER_LDFLAGS = (
 					"$(inherited)",
 					"-sectcreate",
 					__CGPreLoginApp,
@@ -7382,11 +7316,10 @@
 				CODE_SIGN_ENTITLEMENTS = "hidd/hidd-Entitlements.plist";
 				CODE_SIGN_IDENTITY = "-";
 				COPY_PHASE_STRIP = YES;
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				GCC_MODEL_TUNING = G5;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/libexec;
 				OTHER_LDFLAGS = (
 					"$(inherited)",
 					"-sectcreate",
 					__CGPreLoginApp,
@@ -7408,11 +7341,10 @@
 				FRAMEWORK_SEARCH_PATHS = "";
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "";
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDFamily-Embedded.plist";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
@@ -7443,11 +7375,10 @@
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
 				"GCC_THUMB_SUPPORT[arch=armv6]" = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "";
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDFamily-Embedded.plist";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
@@ -7474,11 +7405,10 @@
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				FRAMEWORK_SEARCH_PATHS = "";
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "";
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDFamily-Embedded.plist";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
@@ -7507,11 +7437,10 @@
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = NO;
 				FRAMEWORK_SEARCH_PATHS = "";
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
 				"GCC_THUMB_SUPPORT[arch=armv6]" = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "";
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDFamily-Embedded.plist";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
@@ -7633,11 +7562,10 @@
 				DYLIB_CURRENT_VERSION = 1;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "\"$(SRCROOT)/IOHIDFamily\"";
 				INFOPLIST_FILE = "IOHIDLib/Info-IOHIDLib.plist";
 				OTHER_CFLAGS = (
 					"-W",
 					"-Wall",
@@ -7671,11 +7599,10 @@
 				DYLIB_CURRENT_VERSION = 1;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "\"$(SRCROOT)/IOHIDFamily\"";
 				INFOPLIST_FILE = "IOHIDLib/Info-IOHIDLib.plist";
 				INSTALL_PATH = /System/Library/Extensions/IOHIDFamily.kext/PlugIns;
 				OTHER_CFLAGS = (
 					"-W",
@@ -7707,11 +7634,10 @@
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				DYLIB_COMPATIBILITY_VERSION = 1;
 				DYLIB_CURRENT_VERSION = 1;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "\"$(SRCROOT)/IOHIDFamily\"";
 				INFOPLIST_FILE = "IOHIDLib/Info-IOHIDLib.plist";
 				OTHER_CFLAGS = (
 					"-W",
 					"-Wall",
@@ -7743,11 +7669,10 @@
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				DYLIB_COMPATIBILITY_VERSION = 1;
 				DYLIB_CURRENT_VERSION = 1;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "\"$(SRCROOT)/IOHIDFamily\"";
 				INFOPLIST_FILE = "IOHIDLib/Info-IOHIDLib.plist";
 				INSTALL_PATH = /System/Library/Extensions/IOHIDFamily.kext/PlugIns;
 				OTHER_CFLAGS = (
 					"-W",
@@ -7778,11 +7703,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -7822,11 +7746,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -7867,11 +7790,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -7905,11 +7827,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -7944,11 +7865,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -7988,11 +7908,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -8033,11 +7952,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -8071,11 +7989,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -8122,18 +8039,21 @@
 				CLANG_WARN_UNREACHABLE_CODE = YES;
 				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				ENABLE_TESTABILITY = YES;
 				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_PREPROCESSOR_DEFINITIONS = __BUILDING_PUREDARWIN__;
+				GCC_TREAT_WARNINGS_AS_ERRORS = NO;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES;
 				GCC_WARN_SHADOW = YES;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				ONLY_ACTIVE_ARCH = YES;
 				OTHER_CFLAGS = "$(inherited)";
 				OTHER_CPLUSPLUSFLAGS = "$(inherited)";
+				SDKROOT = macosx.internal;
 				VALID_ARCHS = "i386 x86_64 arm64 arm64_32 armv4t armv5 armv6 armv6m armv7 armv7em armv7f armv7k armv7m armv7s x86_64h";
 			};
 			name = Development;
 		};
 		84EC18A708D8FA9B00E9F643 /* Deployment */ = {
@@ -8151,28 +8071,30 @@
 				CLANG_WARN_SUSPICIOUS_MOVE = YES;
 				CLANG_WARN_UNREACHABLE_CODE = YES;
 				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_PREPROCESSOR_DEFINITIONS = __BUILDING_PUREDARWIN__;
+				GCC_TREAT_WARNINGS_AS_ERRORS = NO;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES;
 				GCC_WARN_SHADOW = YES;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				OTHER_CFLAGS = "$(inherited)";
 				OTHER_CPLUSPLUSFLAGS = "$(inherited)";
+				SDKROOT = macosx.internal;
 				VALID_ARCHS = "i386 x86_64 arm64 arm64_32 armv4t armv5 armv6 armv6m armv7 armv7em armv7f armv7k armv7m armv7s x86_64h";
 			};
 			name = Deployment;
 		};
 		982748411C4F88DE00582ECC /* Development */ = {
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -8193,11 +8115,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -8220,11 +8141,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -8245,11 +8165,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -8272,11 +8191,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -8291,11 +8209,10 @@
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -8317,11 +8234,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -8336,11 +8252,10 @@
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -8362,11 +8277,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -8385,11 +8299,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -8411,11 +8324,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -8434,11 +8346,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -8460,11 +8371,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -8477,11 +8387,10 @@
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -8503,11 +8412,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -8520,11 +8428,10 @@
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -8578,19 +8485,16 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "c++14";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
-				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
 				CLANG_WARN_ENUM_CONVERSION = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
 				CLANG_WARN_UNREACHABLE_CODE = YES;
 				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = dwarf;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
@@ -8601,13 +8505,11 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
-				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				INFOPLIST_FILE = "IOHIDEventSystemPlugIns/IOHIDNXEventTranslatorSessionFilter-info.plist";
@@ -8627,19 +8529,16 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "c++14";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
-				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
 				CLANG_WARN_ENUM_CONVERSION = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
 				CLANG_WARN_UNREACHABLE_CODE = YES;
 				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = dwarf;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
@@ -8650,13 +8549,11 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
-				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				INFOPLIST_FILE = "IOHIDEventSystemPlugIns/IOHIDNXEventTranslatorSessionFilter-info.plist";
@@ -8676,30 +8573,25 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "c++14";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
-				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
 				CLANG_WARN_ENUM_CONVERSION = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
 				CLANG_WARN_UNREACHABLE_CODE = YES;
 				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
-				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				INFOPLIST_FILE = "IOHIDEventSystemPlugIns/IOHIDNXEventTranslatorSessionFilter-info.plist";
@@ -8719,30 +8611,25 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "c++14";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
-				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
 				CLANG_WARN_ENUM_CONVERSION = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
 				CLANG_WARN_UNREACHABLE_CODE = YES;
 				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
-				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				INFOPLIST_FILE = "IOHIDEventSystemPlugIns/IOHIDNXEventTranslatorSessionFilter-info.plist";
@@ -8762,11 +8649,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -8785,11 +8671,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -8811,11 +8696,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -8834,11 +8718,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -8860,11 +8743,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -8877,11 +8759,10 @@
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -8902,11 +8783,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -8919,11 +8799,10 @@
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -8944,11 +8823,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -8975,11 +8853,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -9005,11 +8882,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -9036,11 +8912,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -9066,11 +8941,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -9091,11 +8965,10 @@
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				FRAMEWORK_VERSION = A;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -9120,11 +8993,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -9145,11 +9017,10 @@
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				FRAMEWORK_VERSION = A;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -9176,11 +9047,10 @@
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventFastPathTestDriver.plist";
 				INSTALL_PATH = /AppleInternal/CoreOS/tests/IOHIDFamily;
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventFastPathDriver;
@@ -9211,11 +9081,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventFastPathTestDriver.plist";
 				INSTALL_PATH = /AppleInternal/CoreOS/tests/IOHIDFamily;
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventFastPathDriver;
@@ -9244,11 +9113,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventFastPathTestDriver.plist";
 				INSTALL_PATH = /AppleInternal/CoreOS/tests/IOHIDFamily;
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventFastPathDriver;
@@ -9276,11 +9144,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventFastPathTestDriver.plist";
 				INSTALL_PATH = /AppleInternal/CoreOS/tests/IOHIDFamily;
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventFastPathDriver;
@@ -9309,11 +9176,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -9332,11 +9198,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -9358,11 +9223,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -9381,11 +9245,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -9407,11 +9270,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -9424,11 +9286,10 @@
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -9450,11 +9311,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -9467,11 +9327,10 @@
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -9543,18 +9402,21 @@
 				CLANG_WARN_UNREACHABLE_CODE = YES;
 				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				ENABLE_TESTABILITY = YES;
 				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_PREPROCESSOR_DEFINITIONS = __BUILDING_PUREDARWIN__;
+				GCC_TREAT_WARNINGS_AS_ERRORS = NO;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES;
 				GCC_WARN_SHADOW = YES;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				ONLY_ACTIVE_ARCH = YES;
 				OTHER_CFLAGS = "$(inherited)";
 				OTHER_CPLUSPLUSFLAGS = "$(inherited)";
+				SDKROOT = macosx.internal;
 				VALID_ARCHS = "i386 x86_64 arm64 arm64_32 armv4t armv5 armv6 armv6m armv7 armv7em armv7f armv7k armv7m armv7s x86_64h";
 			};
 			name = "Development-CodeCoverage";
 		};
 		D89E791C1E75203B00F4E2D6 /* Development-CodeCoverage */ = {
@@ -9596,13 +9458,14 @@
 				FRAMEWORK_SEARCH_PATHS = "";
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
+				GCC_WARN_INHIBIT_ALL_WARNINGS = YES;
 				HEADER_SEARCH_PATHS = "$(SDKROOT)/usr/local/include";
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDFamily.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDFamily;
 				OTHER_CFLAGS = "$(inherited)";
@@ -9630,11 +9493,10 @@
 				FRAMEWORK_SEARCH_PATHS = "";
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "";
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDFamily-Embedded.plist";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
@@ -9662,12 +9524,12 @@
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriver.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriver;
 				OTHER_CFLAGS = "$(inherited)";
 				OTHER_LDFLAGS = "$(inherited)";
@@ -9693,11 +9555,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriver.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriver;
 				MODULE_VERSION = 1.5.2;
@@ -9726,12 +9587,12 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriverSafeBoot.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriverSafeBoot;
 				OTHER_CFLAGS = "$(inherited)";
 				OTHER_LDFLAGS = "$(inherited)";
@@ -9757,11 +9618,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriverSafeBoot.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriverSafeBoot;
 				MODULE_VERSION = 1.5.2;
@@ -9791,13 +9651,13 @@
 				FRAMEWORK_SEARCH_PATHS = "";
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "";
 				INFOPLIST_FILE = "IOHIDSystem/Info-IOHIDSystem.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDSystem;
 				OTHER_CFLAGS = "$(inherited)";
@@ -9824,11 +9684,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "\"$(SRCROOT)/IOHIDFamily\"";
 				INFOPLIST_FILE = "IOHIDLib/Info-IOHIDLib.plist";
 				INSTALL_PATH = /System/Library/Extensions/IOHIDFamily.kext/Contents/PlugIns/;
 				OTHER_CFLAGS = (
 					"-W",
@@ -9864,11 +9723,10 @@
 				DYLIB_CURRENT_VERSION = 1;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "\"$(SRCROOT)/IOHIDFamily\"";
 				INFOPLIST_FILE = "IOHIDLib/Info-IOHIDLib.plist";
 				OTHER_CFLAGS = (
 					"-W",
 					"-Wall",
@@ -9900,11 +9758,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDTestDriver.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDTestDriver;
 				OTHER_CFLAGS = "$(inherited)";
@@ -9930,11 +9787,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDUserClient.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDUserClient;
 				OTHER_CFLAGS = "$(inherited)";
@@ -9958,11 +9814,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
 				CLANG_WARN_ENUM_CONVERSION = YES;
@@ -9977,11 +9832,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				INFOPLIST_FILE = "IOHIDEventSystemPlugIns/IOHIDEventSystemStatistics-Info.plist";
@@ -10001,11 +9855,10 @@
 			buildSettings = {
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
-				GCC_TREAT_WARNINGS_AS_ERRORS = NO;
 				INSTALLHDRS_COPY_PHASE = YES;
 				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Frameworks/Kernel.framework/Versions/A/Headers/IOKit/hid";
 				OTHER_CFLAGS = "";
 				OTHER_LDFLAGS = "";
 				OTHER_REZFLAGS = "";
@@ -10052,11 +9905,10 @@
 				CODE_SIGN_IDENTITY = "-";
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_MODEL_TUNING = G5;
 				GCC_OPTIMIZATION_LEVEL = 0;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/libexec;
 				OTHER_LDFLAGS = (
 					"$(inherited)",
 					"-sectcreate",
 					__CGPreLoginApp,
@@ -10078,11 +9930,10 @@
 				CODE_SIGN_IDENTITY = "-";
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_MODEL_TUNING = G5;
 				GCC_OPTIMIZATION_LEVEL = 0;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = "$(inherited)";
 				PRODUCT_NAME = hidUserDeviceTest;
 				SDKROOT = macosx.internal;
 			};
@@ -10095,11 +9946,10 @@
 				CODE_SIGN_IDENTITY = "-";
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_MODEL_TUNING = G5;
 				GCC_OPTIMIZATION_LEVEL = 0;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = "$(inherited)";
 				PRODUCT_NAME = hidReportTest;
 			};
 			name = "Development-CodeCoverage";
@@ -10122,11 +9972,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				ONLY_ACTIVE_ARCH = YES;
@@ -10168,11 +10017,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -10212,11 +10060,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -10257,11 +10104,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -10282,11 +10128,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -10305,11 +10150,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -10328,11 +10172,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -10354,11 +10197,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -10377,11 +10219,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -10411,11 +10252,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"LUA_COMPAT_BITLIB=1",
 					"LUA_COMPAT_APIINTCASTS=1",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = (
 					"$(inherited)",
 					"-sectcreate",
 					__CGPreLoginApp,
@@ -10432,11 +10272,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -10455,11 +10294,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -10481,11 +10319,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -10504,11 +10341,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -10530,11 +10366,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -10553,11 +10388,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -10579,11 +10413,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -10610,11 +10443,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -10640,19 +10472,16 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "c++14";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
-				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
 				CLANG_WARN_ENUM_CONVERSION = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
 				CLANG_WARN_UNREACHABLE_CODE = YES;
 				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = dwarf;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
@@ -10663,13 +10492,11 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
-				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				INFOPLIST_FILE = "IOHIDEventSystemPlugIns/IOHIDNXEventTranslatorSessionFilter-info.plist";
@@ -10689,11 +10516,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -10714,11 +10540,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -10742,11 +10567,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -10772,11 +10596,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -10800,11 +10623,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -10832,11 +10654,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -10863,11 +10684,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -10895,11 +10715,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -10924,11 +10743,10 @@
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventFastPathTestDriver.plist";
 				INSTALL_PATH = /AppleInternal/CoreOS/tests/IOHIDFamily;
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventFastPathDriver;
@@ -10968,16 +10786,19 @@
 				CLANG_WARN_UNREACHABLE_CODE = YES;
 				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				ENABLE_TESTABILITY = YES;
 				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_PREPROCESSOR_DEFINITIONS = __BUILDING_PUREDARWIN__;
+				GCC_TREAT_WARNINGS_AS_ERRORS = NO;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				ONLY_ACTIVE_ARCH = YES;
 				OTHER_CFLAGS = "$(inherited)";
 				OTHER_CPLUSPLUSFLAGS = "$(inherited)";
+				SDKROOT = macosx.internal;
 				VALID_ARCHS = "i386 x86_64 arm64 arm64_32 armv4t armv5 armv6 armv6m armv7 armv7em armv7f armv7k armv7m armv7s x86_64h";
 			};
 			name = "Development-Embedded-CodeCoverage";
 		};
 		D89E79431E75206D00F4E2D6 /* Development-Embedded-CodeCoverage */ = {
@@ -11013,13 +10834,14 @@
 				FRAMEWORK_SEARCH_PATHS = "";
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
+				GCC_WARN_INHIBIT_ALL_WARNINGS = YES;
 				HEADER_SEARCH_PATHS = "$(SDKROOT)/usr/local/include";
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDFamily-Embedded.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDFamily;
 				MODULE_VERSION = 1.5.2;
@@ -11049,11 +10871,10 @@
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
 				"GCC_THUMB_SUPPORT[arch=armv6]" = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "";
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDFamily-Embedded.plist";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
@@ -11082,12 +10903,12 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriver.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriver;
 				MODULE_VERSION = 1.5.2;
 				OTHER_CFLAGS = "$(inherited)";
@@ -11114,11 +10935,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriver.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriver;
 				MODULE_VERSION = 1.5.2;
@@ -11147,12 +10967,12 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriverSafeBoot.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriverSafeBoot;
 				MODULE_VERSION = 1.5.2;
 				OTHER_CFLAGS = "$(inherited)";
@@ -11179,11 +10999,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventDriverSafeBoot.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventDriverSafeBoot;
 				MODULE_VERSION = 1.5.2;
@@ -11213,13 +11032,13 @@
 				FRAMEWORK_SEARCH_PATHS = "";
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "";
 				INFOPLIST_FILE = "IOHIDSystem/Info-IOHIDSystem.plist";
+				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Extensions";
 				KERNEL_MODULE = YES;
 				LIBRARY_SEARCH_PATHS = "";
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDSystem;
 				MODULE_VERSION = 1.5.2;
@@ -11247,11 +11066,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "\"$(SRCROOT)/IOHIDFamily\"";
 				INFOPLIST_FILE = "IOHIDLib/Info-IOHIDLib.plist";
 				INSTALL_PATH = /System/Library/Extensions/IOHIDFamily.kext/Contents/PlugIns/;
 				OTHER_CFLAGS = (
 					"-W",
@@ -11287,11 +11105,10 @@
 				DYLIB_CURRENT_VERSION = 1;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				HEADER_SEARCH_PATHS = "\"$(SRCROOT)/IOHIDFamily\"";
 				INFOPLIST_FILE = "IOHIDLib/Info-IOHIDLib.plist";
 				INSTALL_PATH = /System/Library/Extensions/IOHIDFamily.kext/PlugIns;
 				OTHER_CFLAGS = (
 					"-W",
@@ -11324,11 +11141,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDTestDriver.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDTestDriver;
 				MODULE_VERSION = 1.0;
@@ -11356,11 +11172,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDUserClient.plist";
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDUserClient;
 				MODULE_VERSION = 1.5.2;
@@ -11385,11 +11200,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
 				CLANG_WARN_ENUM_CONVERSION = YES;
@@ -11404,11 +11218,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				INFOPLIST_FILE = "IOHIDEventSystemPlugIns/IOHIDEventSystemStatistics-Info.plist";
@@ -11428,11 +11241,10 @@
 			buildSettings = {
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
-				GCC_TREAT_WARNINGS_AS_ERRORS = NO;
 				INSTALLHDRS_COPY_PHASE = YES;
 				INSTALL_PATH = "$(SYSTEM_LIBRARY_DIR)/Frameworks/Kernel.framework/Versions/A/Headers/IOKit/hid";
 				OTHER_CFLAGS = "";
 				OTHER_LDFLAGS = "";
 				OTHER_REZFLAGS = "";
@@ -11479,11 +11291,10 @@
 				CODE_SIGN_IDENTITY = "-";
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_MODEL_TUNING = G5;
 				GCC_OPTIMIZATION_LEVEL = 0;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/libexec;
 				OTHER_LDFLAGS = (
 					"$(inherited)",
 					"-sectcreate",
 					__CGPreLoginApp,
@@ -11502,11 +11313,10 @@
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CODE_SIGN_ENTITLEMENTS = "tools/IOHIDUserDeviceTest-Entitlements.plist";
 				CODE_SIGN_IDENTITY = "-";
 				GCC_MODEL_TUNING = G5;
 				GCC_OPTIMIZATION_LEVEL = 0;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = "$(inherited)";
 				PRODUCT_NAME = hidUserDeviceTest;
 				SDKROOT = macosx.internal;
 			};
@@ -11518,11 +11328,10 @@
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CODE_SIGN_ENTITLEMENTS = "tools/IOHIDReportTest-Entitlements.plist";
 				CODE_SIGN_IDENTITY = "-";
 				GCC_MODEL_TUNING = G5;
 				GCC_OPTIMIZATION_LEVEL = 0;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = "$(inherited)";
 				PRODUCT_NAME = hidReportTest;
 			};
 			name = "Development-Embedded-CodeCoverage";
@@ -11545,11 +11354,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				ONLY_ACTIVE_ARCH = YES;
@@ -11591,11 +11399,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -11636,11 +11443,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -11682,11 +11488,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -11707,11 +11512,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -11730,11 +11534,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -11753,11 +11556,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -11779,11 +11581,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -11802,11 +11603,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -11836,11 +11636,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"LUA_COMPAT_BITLIB=1",
 					"LUA_COMPAT_APIINTCASTS=1",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = (
 					"$(inherited)",
 					"-sectcreate",
 					__CGPreLoginApp,
@@ -11857,11 +11656,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -11880,11 +11678,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -11906,11 +11703,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -11929,11 +11725,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -11955,11 +11750,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -11978,11 +11772,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -12004,11 +11797,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -12035,11 +11827,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -12065,19 +11856,16 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "c++14";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
-				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
 				CLANG_WARN_ENUM_CONVERSION = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
 				CLANG_WARN_UNREACHABLE_CODE = YES;
 				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = dwarf;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
@@ -12088,13 +11876,11 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
-				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
 				INFOPLIST_FILE = "IOHIDEventSystemPlugIns/IOHIDNXEventTranslatorSessionFilter-info.plist";
@@ -12114,11 +11900,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -12139,11 +11924,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -12167,11 +11951,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -12197,11 +11980,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -12225,11 +12007,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -12257,11 +12038,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -12288,11 +12068,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -12320,11 +12099,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -12350,11 +12128,10 @@
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INFOPLIST_FILE = "IOHIDFamily/Info-IOHIDEventFastPathTestDriver.plist";
 				INSTALL_PATH = /AppleInternal/CoreOS/tests/IOHIDFamily;
 				KERNEL_MODULE = YES;
 				MODULE_IOKIT = YES;
 				MODULE_NAME = com.apple.iokit.IOHIDEventFastPathDriver;
@@ -12384,11 +12161,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -12416,11 +12192,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -12447,11 +12222,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -12479,11 +12253,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -12510,11 +12283,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -12536,11 +12308,10 @@
 					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
 					"$(PLATFORM_DIR)/Developer/AppleInternal/Library/Frameworks",
 				);
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -12566,11 +12337,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -12592,11 +12362,10 @@
 					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
 					"$(PLATFORM_DIR)/Developer/AppleInternal/Library/Frameworks",
 				);
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -12622,11 +12391,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -12654,11 +12422,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -12682,11 +12449,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -12714,11 +12480,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -12742,11 +12507,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -12768,11 +12532,10 @@
 					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
 					"$(PLATFORM_DIR)/Developer/AppleInternal/Library/Frameworks",
 				);
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -12795,11 +12558,10 @@
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
@@ -12821,11 +12583,10 @@
 					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
 					"$(PLATFORM_DIR)/Developer/AppleInternal/Library/Frameworks",
 				);
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -12855,11 +12616,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"LUA_COMPAT_BITLIB=1",
 					"LUA_COMPAT_APIINTCASTS=1",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = (
 					"$(inherited)",
 					"-sectcreate",
 					__CGPreLoginApp,
@@ -12884,11 +12644,10 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"LUA_COMPAT_BITLIB=1",
 					"LUA_COMPAT_APIINTCASTS=1",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = (
 					"$(inherited)",
 					"-sectcreate",
 					__CGPreLoginApp,
@@ -12912,11 +12671,10 @@
 				GCC_MODEL_TUNING = G5;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"LUA_COMPAT_BITLIB=1",
 					"LUA_COMPAT_APIINTCASTS=1",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = (
 					"$(inherited)",
 					"-sectcreate",
 					__CGPreLoginApp,
@@ -12940,11 +12698,10 @@
 				GCC_MODEL_TUNING = G5;
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"LUA_COMPAT_BITLIB=1",
 					"LUA_COMPAT_APIINTCASTS=1",
 				);
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				INSTALL_PATH = /usr/local/bin;
 				OTHER_LDFLAGS = (
 					"$(inherited)",
 					"-sectcreate",
 					__CGPreLoginApp,
@@ -12961,11 +12718,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -12984,11 +12740,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -13010,11 +12765,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -13033,11 +12787,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -13059,11 +12812,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -13076,11 +12828,10 @@
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -13102,11 +12853,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -13119,11 +12869,10 @@
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -13145,11 +12894,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -13168,11 +12916,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -13194,11 +12941,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -13217,11 +12963,10 @@
 				GCC_PREPROCESSOR_DEFINITIONS = (
 					"DEBUG=1",
 					"$(inherited)",
 				);
 				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -13243,11 +12988,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -13260,11 +13004,10 @@
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
@@ -13286,11 +13029,10 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ALWAYS_SEARCH_USER_PATHS = NO;
 				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
 				CLANG_CXX_LIBRARY = "libc++";
-				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
 				CLANG_WARN_BOOL_CONVERSION = YES;
 				CLANG_WARN_CONSTANT_CONVERSION = YES;
 				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
 				CLANG_WARN_EMPTY_BODY = YES;
@@ -13303,11 +13045,10 @@
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu99;
 				GCC_NO_COMMON_BLOCKS = YES;
-				GCC_TREAT_WARNINGS_AS_ERRORS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
 				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
 				GCC_WARN_UNDECLARED_SELECTOR = YES;
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
Only in B/IOHIDFamily-1035.41.2/IOHIDFamily.xcodeproj: project.xcworkspace
Only in B/IOHIDFamily-1035.41.2/IOHIDFamily.xcodeproj: xcuserdata
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDFamilyUnitTests/IOHIDUnitTestUtility.m B/IOHIDFamily-1035.41.2/IOHIDFamilyUnitTests/IOHIDUnitTestUtility.m
--- A/IOHIDFamily-1035.41.2/IOHIDFamilyUnitTests/IOHIDUnitTestUtility.m	2017-03-10 06:21:29.000000000 +0000
+++ B/IOHIDFamily-1035.41.2/IOHIDFamilyUnitTests/IOHIDUnitTestUtility.m	2018-07-02 12:09:45.000000000 +0100
@@ -18,20 +18,20 @@
 {
     int err;
     struct sched_param param;
     
     err = pthread_attr_init(p_pthread_attr);
-    require_noerr(err, exit);
+    __Require_noErr(err, exit);
     pthread_attr_setschedpolicy(p_pthread_attr, policy);
-    require_noerr(err, exit);
+    __Require_noErr(err, exit);
     err = pthread_attr_getschedparam(p_pthread_attr, &param);
-    require_noerr(err, exit);
+    __Require_noErr(err, exit);
     param.sched_priority = priority;
     err = pthread_attr_setschedparam(p_pthread_attr, &param);
-    require_noerr(err, exit);
+    __Require_noErr(err, exit);
     err = pthread_attr_setdetachstate(p_pthread_attr, PTHREAD_CREATE_JOINABLE);
-    require_noerr(err, exit);
+    __Require_noErr(err, exit);
     
 exit:
     if ( err != 0 )
         pthread_attr_destroy( p_pthread_attr );
     
@@ -96,11 +96,11 @@
     CFRunLoopRef runloop = CFRunLoopGetCurrent();
     CFRunLoopSourceRef      dummySource     = NULL;
     CFRunLoopSourceContext  dummyContext    = {};
     
     dummySource = CFRunLoopSourceCreate(kCFAllocatorDefault, 0, &dummyContext);
-    require(dummySource, exit);
+    __Require(dummySource, exit);
     
     __runLoop = runloop;
     
     CFRunLoopAddSource(runloop, dummySource, kCFRunLoopDefaultMode);
     
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDLib/IOHIDDeviceClass.cpp B/IOHIDFamily-1035.41.2/IOHIDLib/IOHIDDeviceClass.cpp
--- A/IOHIDFamily-1035.41.2/IOHIDLib/IOHIDDeviceClass.cpp	2017-07-18 01:54:16.000000000 +0100
+++ B/IOHIDFamily-1035.41.2/IOHIDLib/IOHIDDeviceClass.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -1471,21 +1471,21 @@
             if ( queueDepth < kInputReportQueueDeptch_8ms ) {
                 queueDepth = kInputReportQueueDeptch_8ms;
             }
         }
         
-        require_noerr((ret = fReportHandlerQueue->create(0, queueDepth)), SET_REPORT_HANDLER_CLEANUP);
+        __Require_noErr((ret = fReportHandlerQueue->create(0, queueDepth)), SET_REPORT_HANDLER_CLEANUP);
         
         for (uint32_t i=0; i<fReportHandlerElementCount; i++) {
             ret = fReportHandlerQueue->addElement(getElement((IOHIDElementCookie)fReportHandlerElements[i].cookieMin), 0);
-            require_noerr(ret, SET_REPORT_HANDLER_CLEANUP);
+            __Require_noErr(ret, SET_REPORT_HANDLER_CLEANUP);
         }
         
         
         if ( fAsyncPort && fIsOpen ) {
             ret = finishReportHandlerQueueSetup();
-            require_noerr(ret, SET_REPORT_HANDLER_CLEANUP);
+            __Require_noErr(ret, SET_REPORT_HANDLER_CLEANUP);
         }
     }
     
     return kIOReturnSuccess;
     
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDLib/IOHIDTransactionClass.cpp B/IOHIDFamily-1035.41.2/IOHIDLib/IOHIDTransactionClass.cpp
--- A/IOHIDFamily-1035.41.2/IOHIDLib/IOHIDTransactionClass.cpp	2017-06-07 19:12:10.000000000 +0100
+++ B/IOHIDFamily-1035.41.2/IOHIDLib/IOHIDTransactionClass.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -161,11 +161,11 @@
 IOReturn IOHIDTransactionClass::setDirection(IOHIDTransactionDirectionType direction, IOOptionBits options __unused)
 {
     CFIndex     numElements = 0;
     IOReturn    result      = 0;
     
-    require_action(fIsCreated && fElementDictionaryRef, exit, result=kIOReturnError);
+    __Require_Action(fIsCreated && fElementDictionaryRef, exit, result=kIOReturnError);
     
     // RY: If we change directions, we should remove the opposite direction elements
     // from the transaction.  I might decide to leave them alone in the future and 
     // just ignore them during the commit.
     numElements = CFDictionaryGetCount(fElementDictionaryRef);
@@ -363,15 +363,15 @@
     IOHIDValueRef                   event;
     uint32_t                        outputCount         = 0;
     
     allChecks();
     
-    require_action(fIsCreated && fElementDictionaryRef, exit, ret = kIOReturnError);
+    __Require_Action(fIsCreated && fElementDictionaryRef, exit, ret = kIOReturnError);
 
     numElements = CFDictionaryGetCount(fElementDictionaryRef);
     
-    require_action(numElements, exit, ret = kIOReturnError);
+    __Require_Action(numElements, exit, ret = kIOReturnError);
     
     cookies     = (uint64_t *)malloc(sizeof(uint64_t) * numElements);
     elementRefs = (IOHIDTransactionElementRef *)malloc(sizeof(IOHIDTransactionElementRef) * numElements);
     
     CFDictionaryGetKeysAndValues(fElementDictionaryRef, NULL, (const void **)elementRefs);
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDSystem/IOHIDSystem.cpp B/IOHIDFamily-1035.41.2/IOHIDSystem/IOHIDSystem.cpp
--- A/IOHIDFamily-1035.41.2/IOHIDSystem/IOHIDSystem.cpp	2018-01-08 23:28:39.000000000 +0000
+++ B/IOHIDFamily-1035.41.2/IOHIDSystem/IOHIDSystem.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -468,11 +468,11 @@
     OSDictionary    *matchingDevice = serviceMatching("IOHIDevice");
     OSDictionary    *matchingWrangler = serviceMatching("IODisplayWrangler");
     OSDictionary    *matchingGraphicsDevice = serviceMatching("IOGraphicsDevice");
     IOServiceMatchingNotificationHandler iohidNotificationHandler = OSMemberFunctionCast(IOServiceMatchingNotificationHandler, this, &IOHIDSystem::genericNotificationHandler);
     
-    require(super::start(provider), exit_early);
+    __Require(super::start(provider), exit_early);
 
     _setScrollCountParameters();
     
     evInstance = this;
     
@@ -486,11 +486,11 @@
     
     evScreenSize = sizeof(EvScreen) * EV_MAX_SCREENS;
     evScreen = (void *) IOMalloc(evScreenSize);
     savedParameters = OSDictionary::withCapacity(4);
     
-    require(evScreen && savedParameters && _delayedNotificationLock && _delayedNotificationArray, exit_early);
+    __Require(evScreen && savedParameters && _delayedNotificationLock && _delayedNotificationArray, exit_early);
     
     bzero(evScreen, evScreenSize);
     firstWaitCursorFrame = EV_WAITCURSOR;
     maxWaitCursorFrame   = EV_MAXCURSOR;
     createParameters();
@@ -525,26 +525,26 @@
     workLoop = IOHIDWorkLoop::workLoop();
     cmdGate = IOCommandGate::commandGate(this);
     periodicES = IOTimerEventSource::timerEventSource(this, (IOTimerEventSource::Action) &_periodicEvents);
     keyboardEQES = IOInterruptEventSource::interruptEventSource(this, (IOInterruptEventSource::Action) &doProcessKeyboardEQ);
     
-    //require(workLoop && cmdGate && periodicES && eventConsumerES && keyboardEQES, exit_early);
-    require(workLoop && cmdGate && periodicES && keyboardEQES, exit_early);
+    //__Require(workLoop && cmdGate && periodicES && eventConsumerES && keyboardEQES, exit_early);
+    __Require(workLoop && cmdGate && periodicES && keyboardEQES, exit_early);
     
-    require_noerr(workLoop->addEventSource(cmdGate), exit_early);
-    require_noerr(workLoop->addEventSource(periodicES), exit_early);
-    require_noerr(workLoop->addEventSource(keyboardEQES), exit_early);
+    __Require_noErr(workLoop->addEventSource(cmdGate), exit_early);
+    __Require_noErr(workLoop->addEventSource(periodicES), exit_early);
+    __Require_noErr(workLoop->addEventSource(keyboardEQES), exit_early);
   
     _delayedNotificationThread = thread_call_allocate( OSMemberFunctionCast(thread_call_func_t, this, &IOHIDSystem::doProcessNotifications), this);
-    require(_delayedNotificationThread, exit_early);
+    __Require(_delayedNotificationThread, exit_early);
     
     publishNotify = addMatchingNotification(gIOPublishNotification,
                                             matchingDevice,
                                             iohidNotificationHandler,
                                             this,
                                             (void *)&IOHIDSystem::handlePublishNotification );
-    require(publishNotify, exit_early);
+    __Require(publishNotify, exit_early);
     
     // RY: Listen to the root domain
     rootDomain = (IOService *)getPMRootDomain();
     
     if (rootDomain)
@@ -555,28 +555,28 @@
     _displayWranglerMatching = addMatchingNotification(gIOPublishNotification,
                                                        matchingWrangler,
                                                        iohidNotificationHandler,
                                                        this,
                                                        (void *)&IOHIDSystem::handlePublishNotification);
-    require(_displayWranglerMatching, exit_early);
+    __Require(_displayWranglerMatching, exit_early);
     
     _graphicsDeviceMatching = addMatchingNotification(gIOTerminatedNotification,
                                                       matchingGraphicsDevice,
                                                       iohidNotificationHandler,
                                                       this,
                                                       (void *)&IOHIDSystem::handleTerminationNotification);
-    require(_graphicsDeviceMatching, exit_early);
+    __Require(_graphicsDeviceMatching, exit_early);
     
     /*
      * IOHIDSystem serves both as a service and a nub (we lead a double
      * life).  Register ourselves as a nub to kick off matching.
      */
     
 #if !TARGET_OS_EMBEDDED
     _hidActivityThread = thread_call_allocate(hidActivityThread_cb, (thread_call_param_t)this);
     _hidActivityIdle = true;
-    require(_hidActivityThread, exit_early);
+    __Require(_hidActivityThread, exit_early);
 #endif
 
     registerService();
     iWasStarted = true;
 
@@ -745,11 +745,11 @@
 {
     bool                result          = false;
     IOHIDSystem         *self           = (IOHIDSystem *)target;
     IOGraphicsDevice    *graphicsDevice = (IOGraphicsDevice *)newService->metaCast("IOGraphicsDevice");
     
-    require(self, exit);
+    __Require(self, exit);
     
     if (graphicsDevice) {
         for (int i = 0; i < EV_MAX_SCREENS; i++) {
             EvScreen *screen_ptr = &((EvScreen*)self->evScreen)[i];
             if (screen_ptr->instance == graphicsDevice) {
@@ -2562,12 +2562,12 @@
     int screen      = pointToScreen(&p);
     
     // check if current desktop location is in a screen with clipping bounds
     // and apply it
     
-    require_quiet(screen != -1, exit);
-    require_quiet((((1 << screen) & _onScreenPinMask) != 0), exit);
+    __Require_Quiet(screen != -1, exit);
+    __Require_Quiet((((1 << screen) & _onScreenPinMask) != 0), exit);
 
     _cursorHelper.desktopLocation().clipToRect(_onScreenBounds[screen]);
     
 exit:
     return;
@@ -3106,15 +3106,15 @@
     
     if (mac_iokit_check_hid_control(kauth_cred_get()))
         return kIOReturnNotPermitted;
     
     if (onScreen) {
-        require(bounds, exit);
-        require(screenPoint, exit);
+        __Require(bounds, exit);
+        __Require(screenPoint, exit);
   
         screen = pointToScreen(screenPoint);
-        require(screen != -1, exit);
+        __Require(screen != -1, exit);
         
         screenMask = (1 << screen);
 
         if( bounds->minx != bounds->maxx) {
             _onScreenBounds[screen] = *bounds;
@@ -3608,11 +3608,11 @@
     OSNumber *      num;
     UInt64          nanoTime = 0;
     bool            retValue = false;
     OSDictionary    *cursorDict = OSDictionary::withCapacity(4);
     
-    require(cursorDict, exit);
+    __Require(cursorDict, exit);
 
     currentTime = mach_continuous_time ();
     
     deltaTime = AbsoluteTime_to_scalar(&currentTime) - AbsoluteTime_to_scalar(&(self->lastSetCursorTime));
     absolutetime_to_nanoseconds(deltaTime, &nanoTime);
@@ -3663,11 +3663,11 @@
 bool IOHIDSystem::_displaySerializerCallback(void * target, void * ref __unused, OSSerialize *s)
 {
     IOHIDSystem     *self = (IOHIDSystem *) target;
     bool            retValue = false;
     OSDictionary    *mainDict = OSDictionary::withCapacity(4);
-    require(mainDict, exit_early);
+    __Require(mainDict, exit_early);
 
 #define IfNotNullAddNumToDictWithKey(x,y, w,z) \
     if (x) { \
         OSNumber *num = NULL; \
         num = OSNumber::withNumber(y, 8*sizeof(y)); \
@@ -3680,11 +3680,11 @@
     for(int i = 0; i < self->screens; i++) {
         EvScreen &esp = ((EvScreen*)(self->evScreen))[i];
         OSDictionary    *thisDisplay = OSDictionary::withCapacity(4);
         char            key[256];
 
-        require(thisDisplay, next_display);
+        __Require(thisDisplay, next_display);
         snprintf(key, sizeof(key), "%d", i);
         mainDict->setObject(key, thisDisplay);
 
         IfNotNullAddNumToDictWithKey(esp.instance, esp.instance->getRegistryEntryID(), thisDisplay, "io_fb_id");
         IfNotNullAddNumToDictWithKey(esp.displayBounds, esp.displayBounds->minx, thisDisplay, "disp_min_x");
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDSystem/IOHIDUserClient.cpp B/IOHIDFamily-1035.41.2/IOHIDSystem/IOHIDUserClient.cpp
--- A/IOHIDFamily-1035.41.2/IOHIDSystem/IOHIDUserClient.cpp	2017-06-30 20:01:01.000000000 +0100
+++ B/IOHIDFamily-1035.41.2/IOHIDSystem/IOHIDUserClient.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -393,11 +393,11 @@
         HIDLogError("%s is not entitled", name);
         goto exit;
     }
     
     result = super::init();
-    require_action(result, exit, HIDLogError("failed"));
+    __Require_Action(result, exit, HIDLogError("failed"));
     
 exit:
     return result;
 }
 
@@ -461,11 +461,11 @@
 IOReturn IOHIDEventSystemUserClient::clientMemoryForType( UInt32 type,
         UInt32 * flags, IOMemoryDescriptor ** memory )
 {
     IOReturn result;
     
-    require_action(!isInactive(), exit, result=kIOReturnOffline);
+    __Require_Action(!isInactive(), exit, result=kIOReturnOffline);
     
     result = commandGate->runAction(OSMemberFunctionCast(IOCommandGate::Action, this, &IOHIDEventSystemUserClient::clientMemoryForTypeGated), (void*)(intptr_t)type, flags, memory);
     
 exit:
     
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDSystem/IOHIKeyboard.cpp B/IOHIDFamily-1035.41.2/IOHIDSystem/IOHIKeyboard.cpp
--- A/IOHIDFamily-1035.41.2/IOHIDSystem/IOHIKeyboard.cpp	2017-06-09 22:29:46.000000000 +0100
+++ B/IOHIDFamily-1035.41.2/IOHIDSystem/IOHIKeyboard.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -262,11 +262,11 @@
     unsigned char *	map	= NULL;
     IOHIKeyboardMapper * oldMap	= NULL;
     bool		updated = false;
     UInt64		nano;
     
-    require_action(dict, exit, err = kIOReturnBadArgument);
+    __Require_Action(dict, exit, err = kIOReturnBadArgument);
     if( dict->getObject(kIOHIDResetKeyboardKey))
 		resetKeyboard();
 
     IOLockLock( _deviceLock);
 
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDSystem/IOHIPointing.cpp B/IOHIDFamily-1035.41.2/IOHIDSystem/IOHIPointing.cpp
--- A/IOHIDFamily-1035.41.2/IOHIDSystem/IOHIPointing.cpp	2017-06-15 01:04:52.000000000 +0100
+++ B/IOHIDFamily-1035.41.2/IOHIDSystem/IOHIPointing.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -1916,11 +1916,11 @@
 PACurvesFillParamsFromDict(OSDictionary *parameters,
                            const IOFixed64 devScale,
                            const IOFixed64 crsrScale,
                            IOHIPointing__PAParameters &outParams)
 {
-    require(parameters, exit_early);
+    __Require(parameters, exit_early);
 
     outParams.deviceMickysDivider = devScale;
     outParams.cursorSpeedMultiplier = crsrScale;
 
     outParams.accelIndex = OSObjectToIOFixed64(parameters->getObject(kHIDAccelIndexKey));
@@ -1959,22 +1959,22 @@
     IOHIPointing__PAParameters high_curve_params;
     IOHIPointing__PAParameters low_curve_params;
 
 //  HIDLog("Called with %08x, %08x, %08x", desired.asFixed(), devScale.asFixed(), crsrScale.asFixed());
 
-    require(parametricCurves, exit_early);
-    require(crsrScale > 0LL, exit_early);
-    require(devScale > 0LL, exit_early);
-    require(desired > 0LL, exit_early);
+    __Require(parametricCurves, exit_early);
+    __Require(crsrScale > 0LL, exit_early);
+    __Require(devScale > 0LL, exit_early);
+    __Require(desired > 0LL, exit_early);
 
     itr = OSCollectionIterator::withCollection(parametricCurves);
-    require(itr, exit_early);
+    __Require(itr, exit_early);
 
     while (!success) {
         itr->reset();
         dict = OSDynamicCast(OSDictionary, itr->getNextObject());
-        require(PACurvesFillParamsFromDict(dict, devScale, crsrScale, low_curve_params),
+        __Require(PACurvesFillParamsFromDict(dict, devScale, crsrScale, low_curve_params),
                 exit_early);
 
         while (!success && (NULL != dict)) {
             if (!PACurvesFillParamsFromDict(dict, devScale, crsrScale, high_curve_params)) {
                 break;
@@ -1986,11 +1986,11 @@
                 low_curve_params = high_curve_params;
             }
             dict = OSDynamicCast(OSDictionary, itr->getNextObject());
         }
 
-        require(success || !itr->isValid(), exit_early);
+        __Require(success || !itr->isValid(), exit_early);
     };
 
     if ( high_curve_params.accelIndex > low_curve_params.accelIndex ) {
         IOFixed64   ratio = (desired - low_curve_params.accelIndex) / (high_curve_params.accelIndex - low_curve_params.accelIndex);
         int         index;
@@ -2052,11 +2052,11 @@
 PACurvesDebugDictionary(IOHIPointing__PAParameters &primaryParams,
                         IOHIPointing__PASecondaryParameters &secondaryParams)
 {
     OSDictionary    *result = OSDictionary::withCapacity(20);
 
-    require(result, exit_early);
+    __Require(result, exit_early);
 
 #define ADD_NUMBER_FOR(X) \
     do { \
         OSNumber *value = OSNumber::withNumber(X.as64(), 64); \
         if (value) { \
diff -rwU5 A/IOHIDFamily-1035.41.2/IOHIDSystem/IOHITablet.cpp B/IOHIDFamily-1035.41.2/IOHIDSystem/IOHITablet.cpp
--- A/IOHIDFamily-1035.41.2/IOHIDSystem/IOHITablet.cpp	2012-10-30 22:06:09.000000000 +0000
+++ B/IOHIDFamily-1035.41.2/IOHIDSystem/IOHITablet.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -118,14 +118,14 @@
                     ts);
 }
 
 bool IOHITablet::startTabletPointer(IOHITabletPointer *pointer, OSDictionary *properties)
 {
-    require(pointer, no_attach);
-    require(pointer->init(properties), no_attach);
-    require(pointer->attach(this), no_attach);
-    require(pointer->start(this), no_start);
+    __Require(pointer, no_attach);
+    __Require(pointer->init(properties), no_attach);
+    __Require(pointer->attach(this), no_attach);
+    __Require(pointer->start(this), no_start);
     
 no_start:
     pointer->detach(this);
 no_attach:
     return false;
Only in B/IOHIDFamily-1035.41.2: archives
Only in B/IOHIDFamily-1035.41.2: build
Only in B/IOHIDFamily-1035.41.2: create-me-an-archive
Only in B/IOHIDFamily-1035.41.2: obj
Only in B/IOHIDFamily-1035.41.2: sym
diff -rwU5 A/IOHIDFamily-1035.41.2/tools/IOHIDEventSystemMonitor.c B/IOHIDFamily-1035.41.2/tools/IOHIDEventSystemMonitor.c
--- A/IOHIDFamily-1035.41.2/tools/IOHIDEventSystemMonitor.c	2017-06-07 19:12:10.000000000 +0100
+++ B/IOHIDFamily-1035.41.2/tools/IOHIDEventSystemMonitor.c	2018-07-02 12:09:45.000000000 +0100
@@ -433,14 +433,14 @@
                                                             VirtualCopyEvent,
                                                             VirtualSetOutputEvent
                                                         };
     
     eventSystem = IOHIDEventSystemCreate(kCFAllocatorDefault);
-    require(eventSystem, exit);
+    __Require(eventSystem, exit);
         
     result = IOHIDEventSystemOpen(eventSystem, filterEventCallback, NULL, NULL, 0);
-    require(result, exit);
+    __Require(result, exit);
 
     if ( __virtualService ) {
         virtualService = _IOHIDServiceCreateVirtual(kCFAllocatorDefault, 0xb0b0000000000000, &virtualCallbacks, NULL, NULL); // Last 2 args target, refcon
         printf("Virtual Service = %p\n", virtualService);
         _IOHIDEventSystemAddService(eventSystem, virtualService);
@@ -609,14 +609,14 @@
 
 static void listAllServicesWithSystem(IOHIDEventSystemClientRef eventSystem)
 {
     CFArrayRef  services = NULL;
     
-    require(eventSystem, exit);
+    __Require(eventSystem, exit);
     
     services = (CFArrayRef)IOHIDEventSystemClientCopyProperty(eventSystem, CFSTR(kIOHIDServiceRecordsKey));
-    require(services, exit);
+    __Require(services, exit);
     
     listServices(services, 0);
     
 exit:
     if ( services )
@@ -626,11 +626,11 @@
 
 static void listAllServices()
 {
     IOHIDEventSystemClientRef eventSystem = IOHIDEventSystemClientCreateWithType(kCFAllocatorDefault, kIOHIDEventSystemClientTypeAdmin, NULL);
     
-    require(eventSystem, exit);
+    __Require(eventSystem, exit);
     
     listAllServicesWithSystem(eventSystem);
 
 exit:
     if (eventSystem)
@@ -640,14 +640,14 @@
 static void listAllClientsWithSystem(IOHIDEventSystemClientRef eventSystem)
 {
     CFIndex     index;
     CFArrayRef  clients = NULL;
 
-    require(eventSystem, exit);
+    __Require(eventSystem, exit);
     
     clients = (CFArrayRef)IOHIDEventSystemClientCopyProperty(eventSystem, CFSTR(kIOHIDClientRecordsKey));
-    require(clients, exit);
+    __Require(clients, exit);
     
     for ( index=0, printBorder(0); index<CFArrayGetCount(clients); index++, printBorder(0) ) {
         CFDictionaryRef clientRecord    = (CFDictionaryRef)CFArrayGetValueAtIndex(clients, index);
         CFArrayRef      services        = NULL;
         CFNumberRef     number;
@@ -685,11 +685,11 @@
 
 static void listAllClients()
 {
     IOHIDEventSystemClientRef eventSystem = IOHIDEventSystemClientCreateWithType(kCFAllocatorDefault, kIOHIDEventSystemClientTypeAdmin, NULL);
     
-    require(eventSystem, exit);
+    __Require(eventSystem, exit);
     
     listAllClientsWithSystem(eventSystem);
     
 exit:
     if (eventSystem)
@@ -718,14 +718,14 @@
     CFIndex                     keyCount    = sizeof(keys)/sizeof(keys[0]);
 
     _Static_assert(sizeof(keys) / sizeof(keys[0]) == sizeof(values) / sizeof(values[0]), "need same number of keys and values");
 
     attribs = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, keyCount, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
-    require_action(attribs, exit, printf("Unable to create attributes\n"));
+    __Require_Action(attribs, exit, printf("Unable to create attributes\n"));
 
     eventSystem = IOHIDEventSystemClientCreateWithType(kCFAllocatorDefault, __clientType, attribs);
-    require_action(eventSystem, exit, printf("Unable to create client"));
+    __Require_Action(eventSystem, exit, printf("Unable to create client"));
     
     IOHIDEventSystemClientScheduleWithRunLoop(eventSystem, CFRunLoopGetCurrent(), kCFRunLoopCommonModes);
     
     if ( __monitorClients || __monitorServices ) {
         
@@ -738,11 +738,11 @@
             printf("Monitoring client records\n");
             _IOHIDEventSystemClientRegisterClientRecordsChangedCallback(eventSystem, clientRecordsChangedCallback, NULL, NULL);
         }
         
     } else {
-        require_action(!__dispatchOnly, exit, dispatchClientEvents(eventSystem, __dispatchEventMask));
+        __Require_Action(!__dispatchOnly, exit, dispatchClientEvents(eventSystem, __dispatchEventMask));
         
         if ( __dispatchEventMask ) {
             pthread_attr_t  attr;
             pthread_t       tid;
             struct sched_param param;
@@ -762,11 +762,11 @@
         else
             IOHIDEventSystemClientRegisterEventBlock(eventSystem, eventBlock, NULL, NULL);
         
         if ( __matchingCount || __matchingDictionary ) {
             multiple = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
-            require(multiple, exit);
+            __Require(multiple, exit);
             if (__matchingDictionary) {
               CFArrayAppendValue(multiple, __matchingDictionary);
               CFRelease(__matchingDictionary);
               __matchingDictionary = NULL;
             }
diff -rwU5 A/IOHIDFamily-1035.41.2/tools/IOHIDUserDeviceTest.c B/IOHIDFamily-1035.41.2/tools/IOHIDUserDeviceTest.c
--- A/IOHIDFamily-1035.41.2/tools/IOHIDUserDeviceTest.c	2016-12-14 21:42:16.000000000 +0000
+++ B/IOHIDFamily-1035.41.2/tools/IOHIDUserDeviceTest.c	2018-07-02 12:09:45.000000000 +0100
@@ -655,26 +655,26 @@
     CFNumberRef timeoutNumber   = NULL;
     CFNumberRef intervalNumber  = NULL;
     uint32_t    value           = 5000000;
     
     descriptorData = CFDataCreate(kCFAllocatorDefault, descriptor, descriptorLength);
-    require(descriptorData, finish);
+    __Require(descriptorData, finish);
     
     timeoutNumber = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &value);
-    require(timeoutNumber, finish);
+    __Require(timeoutNumber, finish);
     
     intervalNumber = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &reportinterval);
-    require(intervalNumber, finish);
+    __Require(intervalNumber, finish);
     
-    require(properties, finish);
+    __Require(properties, finish);
     
     CFDictionarySetValue(properties, CFSTR(kIOHIDReportDescriptorKey), descriptorData);
     CFDictionarySetValue(properties, CFSTR(kIOHIDRequestTimeoutKey), timeoutNumber);
     CFDictionarySetValue(properties, CFSTR(kIOHIDReportIntervalKey), intervalNumber);
     
     gDevice = IOHIDUserDeviceCreate(kCFAllocatorDefault, properties);
-    require(gDevice, finish);
+    __Require(gDevice, finish);
     
     IOHIDUserDeviceScheduleWithRunLoop(gDevice, CFRunLoopGetCurrent(), kCFRunLoopDefaultMode);
     
     if ( outputReportCallback )
         IOHIDUserDeviceRegisterSetReportCallback(gDevice, outputReportCallback, NULL);
diff -rwU5 A/IOHIDFamily-1035.41.2/tools/hidScript/hidScript.cpp B/IOHIDFamily-1035.41.2/tools/hidScript/hidScript.cpp
--- A/IOHIDFamily-1035.41.2/tools/hidScript/hidScript.cpp	2017-07-07 17:26:46.000000000 +0100
+++ B/IOHIDFamily-1035.41.2/tools/hidScript/hidScript.cpp	2018-07-02 12:09:45.000000000 +0100
@@ -125,16 +125,16 @@
         luabridge::LuaRef timeout = luabridge::LuaRef::fromStack(L, 2);
         if (!timeout.isNumber()) {
             return result;
         }
         port = IONotificationPortCreate(kIOMasterPortDefault);
-        require(port, exit);
+        __Require(port, exit);
         
         IONotificationPortSetDispatchQueue (port, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0));
         
         service = IOHIDUserDeviceCopyService(device_);
-        require(service, exit);
+        __Require(service, exit);
         
         
         semphore = dispatch_semaphore_create(0);
         
         callback = [](void * refcon, io_service_t service __unused , uint32_t  messageType, void * messageArgument __unused) -> void {
@@ -191,18 +191,18 @@
     
     void CreateDevice (std::string & properties, std::vector<uint8_t> & descriptor) {
         CFDataRef   descriptorData    = NULL;
         CFPropertyListRef propertiesDict  = NULL;
         CFDataRef   propertyData = CFDataCreate(kCFAllocatorDefault, (const uint8_t*)properties.data(), properties.length());
-        require(propertyData, finish);
+        __Require(propertyData, finish);
 
         propertiesDict = CFPropertyListCreateWithData(kCFAllocatorDefault, propertyData, kCFPropertyListMutableContainers, NULL, NULL);
         CFRelease(propertyData);
-        require(propertiesDict, finish);
+        __Require(propertiesDict, finish);
         
         descriptorData = CFDataCreate(kCFAllocatorDefault, descriptor.data(), descriptor.size());
-        require(descriptorData, finish);
+        __Require(descriptorData, finish);
         
         CFDictionarySetValue((CFMutableDictionaryRef)propertiesDict, CFSTR(kIOHIDReportDescriptorKey), (const void*)descriptorData);
         CFRelease(descriptorData);
         
         device_ = IOHIDUserDeviceCreate(kCFAllocatorDefault, (CFDictionaryRef)propertiesDict);
